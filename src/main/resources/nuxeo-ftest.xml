<project name="nuxeo-ftest"
         default="run-selenium"
         xmlns:nx="urn:nuxeo-build"
         xmlns:artifact="urn:nuxeo-artifact">
  <taskdef resource="org/nuxeo/build/antlib.xml" uri="urn:nuxeo-build" />
  <taskdef resource="org/nuxeo/build/artifact/antlib.xml"
           uri="urn:nuxeo-artifact" />
  <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <property name="nuxeoURL" value="http://localhost:8080/nuxeo/" />
  <property name="browser" value="chrome" />
  <property name="out.dir" value="${maven.project.build.directory}" />
  <property name="jdbc.dir" value="${out.dir}/jdbc-libs" />
  <property name="suites" value="null" />
  <property name="classifier" value="nuxeo-dm" />

  <!-- FunkLoad support -->
  <propertyregex property="nuxeoURLNoEndingSlash"
                 input="${nuxeoURL}"
                 regexp="(.*)/"
                 select="\1"
                 defaultValue="${nuxeoURL}" />
  <property name="monitorConf" value="monitor.conf" />
  <property name="credentialsConf" value="credential.conf" />

    <!-- Oracle drivers are not available in maven repositories.
         We must have them accessible on a private URL.-->
  <property name="oracle10g.driver.location" value="http://mavenpriv.in.nuxeo.com/nexus/service/local/artifact/maven/redirect?r=releases&amp;g=com.oracle&amp;a=ojdbc14&amp;v=10.2.0.5&amp;e=jar" />
  <property name="oracle10g.driver.filename" value="ojdbc14-10.2.0.5.jar" />
  <property name="oracle11g.driver.location" value="http://mavenpriv.in.nuxeo.com/nexus/service/local/artifact/maven/redirect?r=releases&amp;g=com.oracle&amp;a=ojdbc6&amp;v=11.2.0.2&amp;e=jar" />
  <property name="oracle11g.driver.filename" value="ojdbc6-11.2.0.2.jar" />

  <target name="_init" unless="_init.done">
    <property name="_init.done" value="true" />
    <property environment="env" />
    <condition property="osfamily-unix">
      <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
      <os family="windows" />
    </condition>
    <!-- Set nuxeo.home to NUXEO_HOME env property if defined,
    else set to ${out.dir}/jboss if jboss Maven profile is active,
    else set to ${out.dir}/tomcat -->
    <condition property="nuxeo.home" value="${out.dir}/jboss">
      <and>
        <isset property="maven.profile.jboss" />
        <not>
          <isset property="env.NUXEO_HOME" />
        </not>
      </and>
    </condition>
    <condition property="nuxeo.home"
               value="${env.NUXEO_HOME}"
               else="${out.dir}/tomcat">
      <isset property="env.NUXEO_HOME" />
    </condition>
    <!-- Set nuxeo.conf to NUXEO_CONF env property if defined,
    else set to ${nuxeo.home}/bin/nuxeo.conf -->
    <condition property="nuxeo.conf"
               value="${env.NUXEO_CONF}"
               else="${nuxeo.home}/bin/nuxeo.conf">
      <isset property="env.NUXEO_CONF" />
    </condition>
    <!-- Generate random id. It will be used
    when NX_DB_NAME, NX_DB_USER or NX_DB_PASS are not specified -->
    <math result="randomresult">
      <op op="rint">
        <op op="*">
          <num value="999999"/>
          <op op="random"/>
        </op>
      </op>
    </math>
    <propertyregex property="rndid"
                   input="${randomresult}"
                   regexp="([^\.]*)\.0"
                   select="\1" />
    <!-- put db profile used into a property for later use -->
    <nx:profile name="pgsql">
      <property name="maven.dbprofile" value="PGSQL" />
    </nx:profile>
    <nx:profile name="mssql">
      <property name="maven.dbprofile" value="MSSQL" />
    </nx:profile>
    <nx:profile name="oracle10g">
      <property name="maven.dbprofile" value="ORACLE10G" />
    </nx:profile>
    <nx:profile name="oracle11g">
      <property name="maven.dbprofile" value="ORACLE11G" />
    </nx:profile>
    <nx:profile name="mysql">
      <property name="maven.dbprofile" value="MYSQL" />
    </nx:profile>
    <!-- if NX_DB_SOMETHING is not defined,
         try to fallback on NX_${maven.dbprofile}_DB_SOMETHING -->
    <for list="HOST,PORT,NAME,USER,PASS,ADMINNAME,ADMINUSER,ADMINPASS" param="dbvar">
      <sequential>
        <if>
          <and>
            <not>
              <isset property="env.NX_DB_@{dbvar}" />
            </not>
            <isset property="env.NX_${maven.dbprofile}_DB_@{dbvar}" />
          </and>
          <then>
            <propertycopy property="env.NX_DB_@{dbvar}" from="env.NX_${maven.dbprofile}_DB_@{dbvar}" silent="false" />
            <echo>Using NX_${maven.dbprofile}_DB_@{dbvar} fallback for undefined NX_DB_@{dbvar}</echo>
          </then>
        </if>
      </sequential>
    </for>
    <!-- set nuxeo.db.host to NX_DB_HOST env property if defined -->
    <condition property="nuxeo.db.host"
               value="${env.NX_DB_HOST}">
      <isset property="env.NX_DB_HOST" />
    </condition>
    <!-- set nuxeo.db.port to NX_DB_PORT env property if defined -->
    <condition property="nuxeo.db.port"
               value="${env.NX_DB_PORT}">
      <isset property="env.NX_DB_PORT" />
    </condition>
    <!-- set nuxeo.db.name to NX_DB_NAME env property if defined -->
    <condition property="nuxeo.db.name"
               value="${env.NX_DB_NAME}"
               else="nxdbname${rndid}">
      <isset property="env.NX_DB_NAME" />
    </condition>
    <!-- set nuxeo.db.user to NX_DB_USER env property if defined -->
    <condition property="nuxeo.db.user"
               value="${env.NX_DB_USER}"
               else="nxdbuser${rndid}">
      <isset property="env.NX_DB_USER" />
    </condition>
    <!-- set nuxeo.db.pass to NX_DB_PASS env property if defined -->
    <condition property="nuxeo.db.pass"
               value="${env.NX_DB_PASS}"
               else="nxdbpass${rndid}">
      <isset property="env.NX_DB_PASS" />
    </condition>
    <!-- set nuxeo.dbsetup.adminname to NX_DB_ADMINNAME env property if defined -->
    <condition property="nuxeo.dbsetup.adminname"
               value="${env.NX_DB_ADMINNAME}">
      <isset property="env.NX_DB_ADMINNAME" />
    </condition>
    <!-- set nuxeo.dbsetup.adminuser to NX_DB_ADMINUSER env property if defined -->
    <condition property="nuxeo.dbsetup.adminuser"
               value="${env.NX_DB_ADMINUSER}">
      <isset property="env.NX_DB_ADMINUSER" />
    </condition>
    <!-- set nuxeo.dbsetup.adminpass to NX_DB_ADMINPASS env property if defined -->
    <condition property="nuxeo.dbsetup.adminpass"
               value="${env.NX_DB_ADMINPASS}">
      <isset property="env.NX_DB_ADMINPASS" />
    </condition>
    <!-- set nuxeo.dbsetup.donuxeoconf to true if we have all the parameters
     required by nuxeo -->
    <condition property="nuxeo.dbsetup.donuxeoconf"
               value="true">
      <and>
        <isset property="nuxeo.db.host" />
        <isset property="nuxeo.db.port" />
        <isset property="nuxeo.db.name" />
        <isset property="nuxeo.db.user" />
        <isset property="nuxeo.db.pass" />
      </and>
    </condition>
    <!-- set nuxeo.dbsetup.dodbconf to true if we have all the parameters
     required by nuxeo and admin access to the database -->
    <condition property="nuxeo.dbsetup.dodbconf"
               value="true">
      <and>
        <isset property="nuxeo.dbsetup.donuxeoconf" />
        <isset property="nuxeo.dbsetup.adminname" />
        <isset property="nuxeo.dbsetup.adminuser" />
        <isset property="nuxeo.dbsetup.adminpass" />
      </and>
    </condition>
    <!-- fail the build when a db profile is selected but db parameters
     are missing -->
    <fail message="${maven.dbprofile} is selected but database parameters are missing">
      <condition>
        <and>
          <isset property="maven.dbprofile" />
          <not>
            <isset property="nuxeo.dbsetup.donuxeoconf" />
          </not>
        </and>
      </condition>
    </fail>
    <!-- give a warning when a db profile is selected but db administration
     parameters are missing -->
    <if>
      <and>
        <isset property="maven.dbprofile" />
        <not>
          <isset property="nuxeo.dbsetup.dodbconf" />
        </not>
      </and>
      <then>
        <echo>WARNING: Profile ${maven.dbprofile} is selected but database
         administration parameters are missing</echo>
      </then>
    </if>
  </target>

  <target name="debug" depends="_init">
    <echoproperties />
  </target>

  <target name="selenium-run-suite">
    <echo>Suite: ${suite}</echo>
    <exec executable="java"
          output="${out.dir}/selenium.log"
          resultproperty="exitCode"
          failonerror="false">
      <arg line="${standard.selenium.args1}" />
      <arg line="${standard.selenium.args2}" />
      <arg line="${standard.selenium.args3}" />
      <arg line="${standard.selenium.args4}" />
      <arg line="${standard.selenium.args5}" />
      <arg line="${standard.selenium.args6}" />
      <arg line="tests/${suite}.html" />
      <arg line="${out.dir}/results/result-${suite}.html" />
      <arg line="${browser.specific.selenium.arg}" />
    </exec>
    <math result="tmperr" operation="+" operand1="${errors}" operand2="${exitCode}" datatype="int" />
    <var name="errors" value="${tmperr}" />
    <if>
      <not>
        <equals arg1="${exitCode}" arg2="0" />
      </not>
      <then>
        <var name="errmsg" value="${errmsg} ${suite}," />
      </then>
    </if>
  </target>

  <target name="run-selenium" depends="_init">
    <antcall target="prepare-selenium" />

    <property name="standard.selenium.args1"
              value="-jar ${out.dir}/selenium-server.jar" />
    <property name="standard.selenium.args2"
              value="-log ${out.dir}/selenium-debug.log" />
    <property name="standard.selenium.args3" value="-port 14440" />
    <property name="standard.selenium.args4" value="-timeout 7200" />
    <property name="standard.selenium.args5"
              value="-userExtensions ${out.dir}/user-extensions.js" />
    <property name="standard.selenium.args6"
              value="-htmlSuite *${browser} ${nuxeoURL}" />
    <condition property="browser.specific.selenium.arg" value="-port 14440">
      <not>
        <equals arg1="${browser}" arg2="chrome" />
      </not>
    </condition>
    <condition property="browser.specific.selenium.arg"
               value="-firefoxProfileTemplate ${out.dir}/ffprofile">
      <equals arg1="${browser}" arg2="chrome" />
    </condition>

    <mkdir dir="${out.dir}/results" />
    <echo>java ${standard.selenium.args1} ${standard.selenium.args2} ${standard.selenium.args3}
      ${standard.selenium.args4} ${standard.selenium.args5} ${standard.selenium.args6}
      tests/${suite}.html ${out.dir}/results/result-${suite}.html ${browser.specific.selenium.arg}
      >${out.dir}/selenium.log
      with ${suite} in ${suites}
    </echo>
    <var name="errors" value="0" />
    <var name="errmsg" value="Suites in error: " />
    <for list="${suites}" param="suite">
      <sequential>
        <antcallback target="selenium-run-suite" return="errors,errmsg">
          <param name="suite" value="@{suite}" />
        </antcallback>
      </sequential>
    </for>

    <propertyregex property="errormessage" override="true"
                   input="${errmsg}"
                   regexp="(.*),"
                   select="\1"
                   defaultValue="${errmsg}" />

    <fail status="${errors}" message="${errormessage}">
      <condition>
        <not>
          <equals arg1="${error}" arg2="0" />
        </not>
      </condition>
    </fail>
  </target>

  <target name="funkload-ctl-daemons">
    <exec executable="fl-monitor-ctl" failonerror="false">
      <arg value="${monitorConf}" />
      <arg value="${action}" />
      <env key="REPORT" value="${out.dir}/report" />
      <env key="LOG_HOME" value="${out.dir}/log" />
    </exec>
    <exec executable="fl-credential-ctl" failonerror="false">
      <arg value="${credentialsConf}" />
      <arg value="${action}" />
      <env key="REPORT" value="${out.dir}/report" />
      <env key="LOG_HOME" value="${out.dir}/log" />
    </exec>
  </target>

  <target name="fl-run-suite">
    <echo>Suite: ${suite}</echo>
    <echo>Running: fl-run-test -v --simple-fetch ${suite} -u ${nuxeoURLNoEndingSlash} --no-color</echo>
    <exec executable="fl-run-test"
          failonerror="false"
          resultProperty="exitCode">
      <arg line="-v --simple-fetch ${suite} -u ${nuxeoURLNoEndingSlash} --no-color" />
      <env key="REPORT" value="${out.dir}/report" />
      <env key="LOG_HOME" value="${out.dir}/log" />
    </exec>
    <math result="tmperr" operation="+" operand1="${errors}" operand2="${exitCode}" datatype="int" />
    <var name="errors" value="${tmperr}" />
    <if>
      <not>
        <equals arg1="${exitCode}" arg2="0" />
      </not>
      <then>
        <var name="errmsg" value="${errmsg} ${suite}," />
      </then>
    </if>
  </target>

  <target name="fl-run-tests">
    <for list="${tests}" param="test" delimiter=":" trim="true">
      <sequential>
        <echo>Suite: ${suite} - Test: @{test}</echo>
        <echo>Running: fl-run-test -v --simple-fetch ${suite} -e @{test} -u ${nuxeoURLNoEndingSlash} --no-color</echo>
        <exec executable="fl-run-test"
              failonerror="false"
              resultProperty="exitCode">
          <arg line="-v --simple-fetch ${suite} -e @{test} -u ${nuxeoURLNoEndingSlash} --no-color" />
          <env key="REPORT" value="${out.dir}/report" />
          <env key="LOG_HOME" value="${out.dir}/log" />
        </exec>
        <math result="tmperr" operation="+" operand1="${errors}" operand2="${exitCode}" datatype="int" />
        <var name="errors" value="${tmperr}" />
        <if>
          <not>
            <equals arg1="${exitCode}" arg2="0" />
          </not>
          <then>
            <var name="errmsg" value="${errmsg} ${suite}[@{test}]," />
          </then>
        </if>
      </sequential>
    </for>
  </target>

  <target name="run-funkload-tests">
    <!-- Run FunLoad tests -->
    <mkdir dir="${out.dir}/report" />
    <mkdir dir="${out.dir}/log" />
    <var name="errors" value="0" />
    <var name="errmsg" value="Tests in error: " />
    <antcall target="funkload-ctl-daemons">
      <param name="action" value="start" />
    </antcall>
    <!-- TESTS START -->
    <for list="${funkload-tests}" param="funkload-test" trim="true">
      <sequential>
        <echo>Handling list element: @{funkload-test}</echo>
        <propertyregex property="flsuite" override="true"
                       input="@{funkload-test}"
                       regexp="([^\[]+).*"
                       select="\1" />
        <propertyregex property="fltests" override="true"
                       input="@{funkload-test}"
                       regexp=".+\[(.*)\]"
                       select="\1"
                       defaultValue="" />
        <if>
          <not>
            <equals arg1="${fltests}" arg2="" />
          </not>
          <then>
            <antcallback target="fl-run-tests" return="errors,errmsg">
              <param name="suite" value="${flsuite}" />
              <param name="tests" value="${fltests}" />
            </antcallback>
          </then>
          <else>
            <antcallback target="fl-run-suite" return="errors,errmsg">
              <param name="suite" value="${flsuite}" />
            </antcallback>
          </else>
        </if>
      </sequential>
    </for>
    <!-- TESTS END -->
    <antcall target="funkload-ctl-daemons">
      <param name="action" value="stop" />
    </antcall>
    <!-- Set exit status -->
    <propertyregex property="errormessage" override="true"
                   input="${errmsg}"
                   regexp="(.*),"
                   select="\1"
                   defaultValue="${errmsg}" />
    <fail status="${errors}" message="${errormessage}">
      <condition>
        <not>
          <equals arg1="${errors}" arg2="0" />
        </not>
      </condition>
    </fail>
  </target>

  <target name="prepare-tomcat" depends="_init">
    <echo>Prepare Tomcat...</echo>
    <delete failonerror="false" dir="${nuxeo.home}" />
    <antcall target="download">
      <param name="groupId" value="org.nuxeo.ecm.distribution" />
      <param name="artifactId" value="nuxeo-distribution-tomcat" />
    </antcall>
    <antcall target="unzip-local" />
    <antcall target="nuxeo-conf" />
    <antcall target="fix-max-waits" />
    <nx:profile name="oracle10g">
      <get src="${oracle10g.driver.location}" dest="${nuxeo.home}/lib/${oracle10g.driver.filename}"/>
    </nx:profile>
    <nx:profile name="oracle11g">
      <get src="${oracle11g.driver.location}" dest="${nuxeo.home}/lib/${oracle11g.driver.filename}"/>
    </nx:profile>
  </target>

  <target name="prepare-jboss" depends="_init">
    <echo>Prepare JBoss...</echo>
    <delete failonerror="false" dir="${nuxeo.home}" />
    <antcall target="download">
      <param name="groupId" value="org.nuxeo.ecm.distribution" />
      <param name="artifactId" value="nuxeo-distribution-jboss" />
    </antcall>
    <antcall target="unzip-local" />
    <antcall target="nuxeo-conf" />
    <antcall target="fix-max-waits" />
    <nx:profile name="oracle10g">
      <get src="${oracle10g.driver.location}" dest="${nuxeo.home}/server/default/lib/${oracle10g.driver.filename}"/>
    </nx:profile>
    <nx:profile name="oracle11g">
      <get src="${oracle11g.driver.location}" dest="${nuxeo.home}/server/default/lib/${oracle11g.driver.filename}"/>
    </nx:profile>
  </target>

  <target name="pgsql-dbdrop" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <sql driver="org.postgresql.Driver"
         url="jdbc:postgresql://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
         userid="${nuxeo.dbsetup.adminuser}" password="${nuxeo.dbsetup.adminpass}"
         autocommit="true">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${jdbc.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      DROP DATABASE IF EXISTS ${nuxeo.db.name};
      DROP USER IF EXISTS ${nuxeo.db.user};
    </sql>
  </target>

  <target name="pgsql-dbcreate" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <sql driver="org.postgresql.Driver"
         url="jdbc:postgresql://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
         userid="${nuxeo.dbsetup.adminuser}" password="${nuxeo.dbsetup.adminpass}"
         autocommit="true" delimiter="--next--">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${jdbc.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      CREATE OR REPLACE FUNCTION mkplpgsql() RETURNS VOID LANGUAGE SQL AS $$$$
      CREATE LANGUAGE plpgsql;
      $$$$;
      --next--
      SELECT
          CASE WHEN EXISTS (
              SELECT 1 FROM pg_catalog.pg_language WHERE lanname='plpgsql'
          ) THEN NULL
          ELSE mkplpgsql()
          END;
      --next--
      DROP FUNCTION mkplpgsql();
      --next--
      CREATE OR REPLACE FUNCTION mktxtint() RETURNS VOID LANGUAGE SQL AS $$$$
      CREATE FUNCTION pg_catalog.text(integer) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(int4out($$1));';
      CREATE CAST (integer AS text) WITH FUNCTION pg_catalog.text(integer) AS IMPLICIT;
      COMMENT ON FUNCTION pg_catalog.text(integer) IS 'convert integer to text';
      $$$$;
      --next--
      SELECT
          CASE WHEN EXISTS (
              SELECT 1 FROM pg_catalog.pg_proc WHERE proname='text' AND prosrc='SELECT textin(int4out($$1));'
          ) THEN NULL
          ELSE mktxtint()
          END;
      --next--
      DROP FUNCTION mktxtint();
      --next--
      CREATE OR REPLACE FUNCTION mktxtbigint() RETURNS VOID LANGUAGE SQL AS $$$$
      CREATE FUNCTION pg_catalog.text(bigint) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(int8out($$1));';
      CREATE CAST (bigint AS text) WITH FUNCTION pg_catalog.text(bigint) AS IMPLICIT;
      COMMENT ON FUNCTION pg_catalog.text(bigint) IS 'convert bigint to text';
      $$$$;
      --next--
      SELECT
          CASE WHEN EXISTS (
              SELECT 1 FROM pg_catalog.pg_proc WHERE proname='text' AND prosrc='SELECT textin(int8out($$1));'
          ) THEN NULL
          ELSE mktxtbigint()
          END;
      --next--
      DROP FUNCTION mktxtbigint();
      --next--
      CREATE USER ${nuxeo.db.user} WITH PASSWORD '${nuxeo.db.pass}';
      --next--
      CREATE DATABASE ${nuxeo.db.name} OWNER ${nuxeo.db.user} ENCODING='UTF-8';
    </sql>
  </target>

  <target name="mssql-dbdrop" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <sql driver="net.sourceforge.jtds.jdbc.Driver"
         url="jdbc:jtds:sqlserver://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
         userid="${nuxeo.dbsetup.adminuser}" password="${nuxeo.dbsetup.adminpass}"
         autocommit="true">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${jdbc.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      IF EXISTS(SELECT * FROM SYS.DATABASES WHERE NAME='${nuxeo.db.name}')
         DROP DATABASE ${nuxeo.db.name};
      IF EXISTS(SELECT * FROM SYS.SERVER_PRINCIPALS WHERE NAME='${nuxeo.db.user}' AND TYPE_DESC IN ('SQL_LOGIN'))
         DROP LOGIN ${nuxeo.db.user};
    </sql>
  </target>

  <target name="mssql-dbcreate" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <sql driver="net.sourceforge.jtds.jdbc.Driver"
         url="jdbc:jtds:sqlserver://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
         userid="${nuxeo.dbsetup.adminuser}" password="${nuxeo.dbsetup.adminpass}"
         autocommit="true">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${jdbc.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      CREATE LOGIN ${nuxeo.db.user} WITH PASSWORD='${nuxeo.db.pass}';
      CREATE DATABASE ${nuxeo.db.name};
      ALTER DATABASE ${nuxeo.db.name} COLLATE French_CS_AS;
      ALTER DATABASE ${nuxeo.db.name} SET ALLOW_SNAPSHOT_ISOLATION ON;
      ALTER DATABASE ${nuxeo.db.name} SET READ_COMMITTED_SNAPSHOT ON;
      USE ${nuxeo.db.name};
      CREATE USER ${nuxeo.db.user} FOR LOGIN ${nuxeo.db.user};
      EXECUTE sp_addrolemember 'db_owner', ${nuxeo.db.user};
    </sql>
  </target>

  <target name="oracle-dbdrop" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <sql driver="oracle.jdbc.OracleDriver"
       url="jdbc:oracle:thin:@//${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
       userid="${nuxeo.dbsetup.adminuser} as sysdba" password="${nuxeo.dbsetup.adminpass}"
       autocommit="true" delimiter="--next--">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${jdbc.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      DECLARE
        num number:=0;
        drop_stmt VARCHAR2(200);
      BEGIN
        SELECT COUNT(*) INTO num FROM dba_users WHERE username = UPPER('${nuxeo.db.user}');
        IF num &lt;&gt; 0 THEN
          EXECUTE IMMEDIATE 'DROP USER ${nuxeo.db.user} CASCADE';
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
      END;
    </sql>
  </target>

  <target name="oracle-dbcreate" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <sql driver="oracle.jdbc.OracleDriver"
       url="jdbc:oracle:thin:@//${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
       userid="${nuxeo.dbsetup.adminuser} as sysdba" password="${nuxeo.dbsetup.adminpass}"
       autocommit="true">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${jdbc.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      CREATE USER ${nuxeo.db.user} IDENTIFIED BY ${nuxeo.db.pass};
      GRANT EXECUTE ON SYS.DBMS_CRYPTO TO ${nuxeo.db.user};
      GRANT SELECT ON SYS.V_$$SESSION TO ${nuxeo.db.user};
      GRANT CONNECT TO ${nuxeo.db.user};
      GRANT RESOURCE TO ${nuxeo.db.user};
    </sql>
  </target>

  <target name="mysql-dbdrop" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <sql driver="com.mysql.jdbc.Driver"
             url="jdbc:mysql://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
             userid="${nuxeo.dbsetup.adminuser}" password="${nuxeo.dbsetup.adminpass}"
             autocommit="true">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${jdbc.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      GRANT USAGE on *.* TO ${nuxeo.db.user}@'%';
      DROP USER ${nuxeo.db.user};
      DROP DATABASE IF EXISTS ${nuxeo.db.name}
    </sql>
  </target>

  <target name="mysql-dbcreate" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <sql driver="com.mysql.jdbc.Driver"
             url="jdbc:mysql://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
             userid="${nuxeo.dbsetup.adminuser}" password="${nuxeo.dbsetup.adminpass}"
             autocommit="true">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${jdbc.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      CREATE DATABASE ${nuxeo.db.name};
      GRANT ALL ON ${nuxeo.db.name}.* TO '${nuxeo.db.user}'@'%' IDENTIFIED BY '${nuxeo.db.pass}';
      FLUSH PRIVILEGES;
    </sql>
  </target>

  <target name="setup-pgsql-driver" depends="_init">
    <copy todir="${jdbc.dir}">
      <artifact:resolveFile key="postgresql:postgresql::jar" />
    </copy>
  </target>

  <target name="prepare-pgsql" depends="_init,setup-pgsql-driver" if="nuxeo.dbsetup.dodbconf">
    <echo>Prepare PostgreSQL...</echo>
    <antcall target="pgsql-dbdrop" />
    <antcall target="pgsql-dbcreate" />
  </target>

  <target name="cleanup-pgsql" depends="_init,setup-pgsql-driver" if="nuxeo.dbsetup.dodbconf">
    <antcall target="pgsql-dbdrop" />
  </target>

  <target name="setup-mssql-driver" depends="_init">
    <copy todir="${jdbc.dir}">
      <artifact:resolveFile key="net.sourceforge.jtds:jtds::jar" />
    </copy>
  </target>

  <target name="prepare-mssql" depends="_init,setup-mssql-driver" if="nuxeo.dbsetup.dodbconf">
    <echo>Prepare MSSQL...</echo>
    <antcall target="mssql-dbdrop" />
    <antcall target="mssql-dbcreate" />
  </target>

  <target name="cleanup-mssql" depends="_init,setup-mssql-driver" if="nuxeo.dbsetup.dodbconf">
    <antcall target="mssql-dbdrop" />
  </target>

  <target name="setup-oracle10g-driver" depends="_init">
    <get src="${oracle10g.driver.location}" dest="${jdbc.dir}/${oracle10g.driver.filename}"/>
  </target>

  <target name="prepare-oracle10g" depends="_init,setup-oracle10g-driver" if="nuxeo.dbsetup.dodbconf">
    <echo>Prepare Oracle 10g...</echo>
    <antcall target="oracle-dbdrop" />
    <antcall target="oracle-dbcreate" />
  </target>

  <target name="cleanup-oracle10g" depends="_init,setup-oracle10g-driver" if="nuxeo.dbsetup.dodbconf">
    <antcall target="oracle-dbdrop" />
  </target>

  <target name="setup-oracle11g-driver" depends="_init">
    <get src="${oracle11g.driver.location}" dest="${jdbc.dir}/${oracle11g.driver.filename}"/>
  </target>

  <target name="prepare-oracle11g" depends="_init,setup-oracle11g-driver" if="nuxeo.dbsetup.dodbconf">
    <echo>Prepare Oracle 10g...</echo>
    <antcall target="oracle-dbdrop" />
    <antcall target="oracle-dbcreate" />
  </target>

  <target name="cleanup-oracle11g" depends="_init,setup-oracle11g-driver" if="nuxeo.dbsetup.dodbconf">
    <antcall target="oracle-dbdrop" />
  </target>

  <target name="setup-mysql-driver" depends="_init">
    <copy todir="${jdbc.dir}">
      <artifact:resolveFile key="mysql:mysql-connector-java::jar" />
    </copy>
  </target>

  <target name="prepare-mysql" depends="_init,setup-mysql-driver" if="nuxeo.dbsetup.dodbconf">
    <echo>Prepare MySQL...</echo>
    <antcall target="mysql-dbdrop" />
    <antcall target="mysql-dbcreate" />
  </target>

  <target name="cleanup-mysql" depends="_init,setup-mysql-driver" if="nuxeo.dbsetup.dodbconf">
    <antcall target="mysql-dbdrop" />
  </target>

  <target name="prepare-db" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <mkdir dir="${jdbc.dir}" />
    <nx:profile name="pgsql">
      <antcall target="prepare-pgsql" />
    </nx:profile>
    <nx:profile name="mssql">
      <antcall target="prepare-mssql" />
    </nx:profile>
    <nx:profile name="oracle10g">
      <antcall target="prepare-oracle10g" />
    </nx:profile>
    <nx:profile name="oracle11g">
      <antcall target="prepare-oracle11g" />
    </nx:profile>
    <nx:profile name="mysql">
      <antcall target="prepare-mysql" />
    </nx:profile>
  </target>

  <target name="cleanup-db" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <mkdir dir="${jdbc.dir}" />
    <nx:profile name="pgsql">
      <antcall target="cleanup-pgsql" />
    </nx:profile>
    <nx:profile name="mssql">
      <antcall target="cleanup-mssql" />
    </nx:profile>
    <nx:profile name="oracle10g">
      <antcall target="cleanup-oracle10g" />
    </nx:profile>
    <nx:profile name="oracle11g">
      <antcall target="cleanup-oracle11g" />
    </nx:profile>
    <nx:profile name="mysql">
      <antcall target="cleanup-mysql" />
    </nx:profile>
  </target>

  <target name="prepare-environment"
          depends="_init"
          description="prepare all ressources for test">
    <antcall target="prepare-db" />
    <nx:profile name="tomcat">
      <antcall target="prepare-tomcat" />
    </nx:profile>
    <nx:profile name="jboss">
      <antcall target="prepare-jboss" />
    </nx:profile>
  </target>

  <target name="cleanup-environment" depends="_init">
    <antcall target="cleanup-db" />
  </target>

  <target name="download" unless="zip.file">
    <unzip dest="${nuxeo.home}/">
      <artifact:resolveFile key="${groupId}:${artifactId}::zip:${classifier}" />
      <cutdirsmapper dirs="1" />
    </unzip>
  </target>
  <target name="unzip-local" if="zip.file">
    <echo message="Using local archive ${zip.file}" />
    <unzip dest="${nuxeo.home}/" src="${zip.file}">
      <cutdirsmapper dirs="1" />
    </unzip>
  </target>

  <target name="prepare-selenium"
          description="prepare Selenium files for tests">
    <copy tofile="${out.dir}/selenium-server.jar">
      <artifact:resolveFile key="org.seleniumhq.selenium:selenium-server-standalone::jar" />
    </copy>
    <echo>Replace local folder in user-extensions.js</echo>
    <path id="data.dir.path">
      <pathelement location="data" />
    </path>
    <pathconvert refid="data.dir.path" property="data.dir.path.for.currentos" />
    <copy file="${out.dir}/user-extensions.js.sample"
          tofile="${out.dir}/user-extensions.js"
          overwrite="true" />
    <echo>Set into user-extensions-browser.js project path ${data.dir.path.for.currentos}</echo>
    <antcall target="user-extensions" />
    <echo>Replace url in prefs.js</echo>
    <copy file="${out.dir}/ffprofile/prefs.js.sample"
          tofile="${out.dir}/ffprofile/prefs.js"
          overwrite="true" />
    <replace file="${out.dir}/ffprofile/prefs.js"
             token="ApplicationServerURL"
             value="${nuxeoURL}" />
  </target>

  <target name="user-extensions"
          depends="user-extensions-for-unix,user-extensions-for-windows">
  </target>
  <target name="user-extensions-for-windows" if="osfamily-windows">
    <replace file="${out.dir}/user-extensions.js"
             token="/path/to/project-ear/ftest/selenium/data/"
             value="${data.dir.path.for.currentos}\" />
    <replace file="${out.dir}/user-extensions.js" token="\" value="\\" />
  </target>
  <target name="user-extensions-for-unix" if="osfamily-unix">
    <replace file="${out.dir}/user-extensions.js"
             token="/path/to/project-ear/ftest/selenium/data/"
             value="${data.dir.path.for.currentos}/" />
  </target>

  <target name="start" depends="_init,stop,start-unix,start-windows" />
  <target name="start-unix" if="osfamily-unix">
    <chmod dir="${nuxeo.home}/bin" perm="ug+x" includes="*.sh,*ctl" />
    <exec executable="${nuxeo.home}/bin/nuxeoctl" spawn="false">
      <arg value="start" />
    </exec>
  </target>
  <target name="start-windows" if="osfamily-windows">
    <exec executable="${nuxeo.home}/bin/nuxeoctl.bat" spawn="false">
      <arg value="nogui" />
      <arg value="start" />
    </exec>
  </target>

  <target name="stop" depends="_init,stop-unix,stop-windows" />
  <target name="stop-unix" if="osfamily-unix">
    <chmod dir="${nuxeo.home}/bin" perm="ug+x" includes="*.sh,*ctl" />
    <exec executable="${nuxeo.home}/bin/nuxeoctl" spawn="false">
      <arg value="stop" />
    </exec>
  </target>
  <target name="stop-windows" if="osfamily-windows">
    <exec executable="${nuxeo.home}/bin/nuxeoctl.bat" spawn="false">
      <arg value="nogui" />
      <arg value="stop" />
    </exec>
  </target>

  <target name="wizard-on"
          depends="_init"
          description="DEPRECATED: call set-conf instead.">
    <echo append="true" file="${nuxeo.conf}">nuxeo.wizard.done=false${line.separator}</echo>
  </target>
  <target name="wizard-off"
          depends="_init"
          description="DEPRECATED: call set-conf instead.">
    <echo append="true" file="${nuxeo.conf}">nuxeo.wizard.done=true${line.separator}</echo>
  </target>

  <target name="set-java-home"
          if="env.NX_JAVA_HOME"
          depends="_init"
          description="Set JAVA_HOME in ${nuxeo.conf} with env.NX_JAVA_HOME value, if defined.">
    <antcall target="set-conf">
      <param name="name" value="JAVA_HOME" />
      <param name="value" value="${env.NX_JAVA_HOME}" />
    </antcall>
    <echo message="Using JAVA_HOME=${env.NX_JAVA_HOME}" />
  </target>

  <target name="fix-max-waits" depends="_init"
          description="Increase default time to wait for server to stop">
    <antcall target="set-conf">
      <param name="name" value="launcher.start.max.wait" />
      <param name="value" value="300" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="launcher.stop.max.wait" />
      <param name="value" value="300" />
    </antcall>
  </target>

  <target name="set-nuxeoconf-db" depends="_init" if="nuxeo.dbsetup.donuxeoconf">
    <nx:profile name="pgsql">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="postgresql" />
      </antcall>
    </nx:profile>
    <nx:profile name="mssql">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="mssql" />
      </antcall>
    </nx:profile>
    <nx:profile name="oracle10g">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="oracle" />
      </antcall>
    </nx:profile>
    <nx:profile name="oracle11g">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="oracle" />
      </antcall>
    </nx:profile>
    <nx:profile name="mysql">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="mysql" />
      </antcall>
    </nx:profile>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.host" />
      <param name="value" value="${nuxeo.db.host}" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.port" />
      <param name="value" value="${nuxeo.db.port}" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.name" />
      <param name="value" value="${nuxeo.db.name}" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.user" />
      <param name="value" value="${nuxeo.db.user}" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.password" />
      <param name="value" value="${nuxeo.db.pass}" />
    </antcall>
  </target>

  <target name="nuxeo-conf"
          depends="_init,set-java-home"
          description="Configure ${nuxeo.conf} depending on environment values.">
    <!-- activate logs for Selenium tests -->
    <antcall target="set-conf">
      <param name="name" value="org.nuxeo.systemlog.token" />
      <param name="value" value="dolog" />
    </antcall>
    <antcall target="set-nuxeoconf-db" />
  </target>

  <target name="set-conf"
          depends="_init"
          description="Add property to ${nuxeo.conf} with ${name}=${value}">
    <echo append="true" file="${nuxeo.conf}">${name}=${value}${line.separator}</echo>
  </target>

</project>
