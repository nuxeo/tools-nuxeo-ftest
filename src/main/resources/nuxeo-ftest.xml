<project name="nuxeo-ftest"
         default="run-selenium"
         xmlns:nx="urn:nuxeo-build"
         xmlns:artifact="urn:nuxeo-artifact">
  <taskdef resource="org/nuxeo/build/antlib.xml" uri="urn:nuxeo-build" />
  <taskdef resource="org/nuxeo/build/artifact/antlib.xml"
           uri="urn:nuxeo-artifact" />
  <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <property name="nuxeoURL" value="http://localhost:8080/nuxeo/" />
  <property name="browser" value="chrome" />
  <property name="out.dir" value="${maven.project.build.directory}" />
  <property name="suites" value="null" />
  <property name="classifier" value="nuxeo-dm" />

  <target name="_init" unless="_init.done">
    <property name="_init.done" value="true" />
    <property environment="env" />
    <condition property="osfamily-unix">
      <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
      <os family="windows" />
    </condition>
    <!-- Set nuxeo.home to NUXEO_HOME env property if defined,
    else set to ${out.dir}/jboss if jboss Maven profile is active,
    else set to ${out.dir}/tomcat -->
    <condition property="nuxeo.home" value="${out.dir}/jboss">
      <and>
        <isset property="maven.profile.jboss" />
        <not>
          <isset property="env.NUXEO_HOME" />
        </not>
      </and>
    </condition>
    <condition property="nuxeo.home"
               value="${env.NUXEO_HOME}"
               else="${out.dir}/tomcat">
      <isset property="env.NUXEO_HOME" />
    </condition>
    <!-- Set nuxeo.conf to NUXEO_CONF env property if defined,
    else set to ${nuxeo.home}/bin/nuxeo.conf -->
    <condition property="nuxeo.conf"
               value="${env.NUXEO_CONF}"
               else="${nuxeo.home}/bin/nuxeo.conf">
      <isset property="env.NUXEO_CONF" />
    </condition>
    <!-- set nuxeo.db.host to DB_HOST env property if defined -->
    <condition property="nuxeo.db.host"
               value="${env.DB_HOST}">
      <isset property="env.DB_HOST" />
    </condition>
    <!-- set nuxeo.db.port to DB_PORT env property if defined -->
    <condition property="nuxeo.db.port"
               value="${env.DB_PORT}">
      <isset property="env.DB_PORT" />
    </condition>
    <!-- set nuxeo.db.name to DB_NAME env property if defined -->
    <condition property="nuxeo.db.name"
               value="${env.DB_NAME}">
      <isset property="env.DB_NAME" />
    </condition>
    <!-- set nuxeo.db.user to DB_USER env property if defined -->
    <condition property="nuxeo.db.user"
               value="${env.DB_USER}">
      <isset property="env.DB_USER" />
    </condition>
    <!-- set nuxeo.db.pass to DB_PASS env property if defined -->
    <condition property="nuxeo.db.pass"
               value="${env.DB_PASS}">
      <isset property="env.DB_PASS" />
    </condition>
    <!-- set nuxeo.dbsetup.adminname to DB_ADMINNAME env property if defined -->
    <condition property="nuxeo.dbsetup.adminname"
               value="${env.DB_ADMINNAME}">
      <isset property="env.DB_ADMINNAME" />
    </condition>
    <!-- set nuxeo.dbsetup.adminuser to DB_ADMINUSER env property if defined -->
    <condition property="nuxeo.dbsetup.adminuser"
               value="${env.DB_ADMINUSER}">
      <isset property="env.DB_ADMINUSER" />
    </condition>
    <!-- set nuxeo.dbsetup.adminpass to DB_ADMINPASS env property if defined -->
    <condition property="nuxeo.dbsetup.adminpass"
               value="${env.DB_ADMINPASS}">
      <isset property="env.DB_ADMINPASS" />
    </condition>
    <!-- set nuxeo.dbsetup.donuxeoconf to true if we have all the parameters
     required by nuxeo -->
    <condition property="nuxeo.dbsetup.donuxeoconf"
               value="true">
      <and>
        <isset property="nuxeo.db.host" />
        <isset property="nuxeo.db.port" />
        <isset property="nuxeo.db.name" />
        <isset property="nuxeo.db.user" />
        <isset property="nuxeo.db.pass" />
      </and>
    </condition>
    <!-- set nuxeo.dbsetup.dodbconf to true if we have all the parameters
     required by nuxeo and admin access to the database -->
    <condition property="nuxeo.dbsetup.dodbconf"
               value="true">
      <and>
        <isset property="nuxeo.dbsetup.donuxeoconf" />
        <isset property="nuxeo.dbsetup.adminname" />
        <isset property="nuxeo.dbsetup.adminuser" />
        <isset property="nuxeo.dbsetup.adminpass" />
      </and>
    </condition>
  </target>

  <target name="debug" depends="_init">
    <echoproperties />
  </target>

  <target name="run-selenium" depends="_init">
    <antcall target="prepare-environment" />
    <antcall target="prepare-selenium" />

    <property name="standard.selenium.args1"
              value="-jar ${out.dir}/selenium-server.jar" />
    <property name="standard.selenium.args2"
              value="-log ${out.dir}/selenium-debug.log" />
    <property name="standard.selenium.args3" value="-port 14440" />
    <property name="standard.selenium.args4" value="-timeout 7200" />
    <property name="standard.selenium.args5"
              value="-userExtensions ${out.dir}/user-extensions.js" />
    <property name="standard.selenium.args6"
              value="-htmlSuite *${browser} ${nuxeoURL}" />
    <condition property="browser.specific.selenium.arg" value="-port 14440">
      <not>
        <equals arg1="${browser}" arg2="chrome" />
      </not>
    </condition>
    <condition property="browser.specific.selenium.arg"
               value="-firefoxProfileTemplate ${out.dir}/ffprofile">
      <equals arg1="${browser}" arg2="chrome" />
    </condition>

    <antcall target="start" />

    <mkdir dir="${out.dir}/results" />
    <echo>java ${standard.selenium.args1} ${standard.selenium.args2} ${standard.selenium.args3}
      ${standard.selenium.args4} ${standard.selenium.args5} ${standard.selenium.args6}
      tests/${suite}.html ${out.dir}/results/result-${suite}.html ${browser.specific.selenium.arg}
      >${out.dir}/selenium.log
      with ${suite} in ${suites}
    </echo>
    <for list="${suites}" param="suite">
      <sequential>
        <echo>Suite @{suite}</echo>
        <exec executable="java"
              output="${out.dir}/selenium.log"
              resultproperty="seleniumResult"
              failonerror="false">
          <arg line="${standard.selenium.args1}" />
          <arg line="${standard.selenium.args2}" />
          <arg line="${standard.selenium.args3}" />
          <arg line="${standard.selenium.args4}" />
          <arg line="${standard.selenium.args5}" />
          <arg line="${standard.selenium.args6}" />
          <arg line="tests/@{suite}.html" />
          <arg line="${out.dir}/results/result-@{suite}.html" />
          <arg line="${browser.specific.selenium.arg}" />
        </exec>
      </sequential>
    </for>

    <antcall target="stop" />

    <fail status="${seleniumResult}">
      <condition>
        <not>
          <equals arg1="${seleniumResult}" arg2="0" />
        </not>
      </condition>
    </fail>
  </target>

  <target name="prepare-tomcat" depends="_init">
    <echo>Prepare Tomcat...</echo>
    <delete failonerror="false" dir="${nuxeo.home}" />
    <antcall target="download">
      <param name="groupId" value="org.nuxeo.ecm.distribution" />
      <param name="artifactId" value="nuxeo-distribution-tomcat" />
    </antcall>
    <antcall target="unzip-local" />
    <antcall target="nuxeo-conf" />
  </target>

  <target name="prepare-jboss" depends="_init">
    <echo>Prepare JBoss...</echo>
    <delete failonerror="false" dir="${nuxeo.home}" />
    <antcall target="download">
      <param name="groupId" value="org.nuxeo.ecm.distribution" />
      <param name="artifactId" value="nuxeo-distribution-jboss" />
    </antcall>
    <antcall target="unzip-local" />
    <antcall target="nuxeo-conf" />
  </target>

  <target name="pgsql-dbdrop" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <sql driver="org.postgresql.Driver"
         url="jdbc:postgresql://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
         userid="${nuxeo.dbsetup.adminuser}" password="${nuxeo.dbsetup.adminpass}"
         autocommit="true">
      DROP DATABASE IF EXISTS ${nuxeo.db.name};
      DROP USER IF EXISTS ${nuxeo.db.user};
    </sql>
  </target>

  <target name="pgsql-dbcreate" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <sql driver="org.postgresql.Driver"
         url="jdbc:postgresql://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.db.adminname}"
         userid="${nuxeo.db.adminuser}" password="${nuxeo.db.adminpass}"
         autocommit="true" delimiter="--next--">
            CREATE OR REPLACE FUNCTION mkplpgsql() RETURNS VOID LANGUAGE SQL AS $$$$
            CREATE LANGUAGE plpgsql;
            $$$$;
            --next--
            SELECT
                CASE WHEN EXISTS (
                    SELECT 1 FROM pg_catalog.pg_language WHERE lanname='plpgsql'
                ) THEN NULL
                ELSE mkplpgsql()
                END;
            --next--
            DROP FUNCTION mkplpgsql();
            --next--
            CREATE OR REPLACE FUNCTION mktxtint() RETURNS VOID LANGUAGE SQL AS $$$$
            CREATE FUNCTION pg_catalog.text(integer) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(int4out($$1));';
            CREATE CAST (integer AS text) WITH FUNCTION pg_catalog.text(integer) AS IMPLICIT;
            COMMENT ON FUNCTION pg_catalog.text(integer) IS 'convert integer to text';
            $$$$;
            --next--
            SELECT
                CASE WHEN EXISTS (
                    SELECT 1 FROM pg_catalog.pg_proc WHERE proname='text' AND prosrc='SELECT textin(int4out($$1));'
                ) THEN NULL
                ELSE mktxtint()
                END;
            --next--
            DROP FUNCTION mktxtint();
            --next--
            CREATE OR REPLACE FUNCTION mktxtbigint() RETURNS VOID LANGUAGE SQL AS $$$$
            CREATE FUNCTION pg_catalog.text(bigint) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(int8out($$1));';
            CREATE CAST (bigint AS text) WITH FUNCTION pg_catalog.text(bigint) AS IMPLICIT;
            COMMENT ON FUNCTION pg_catalog.text(bigint) IS 'convert bigint to text';
            $$$$;
            --next--
            SELECT
                CASE WHEN EXISTS (
                    SELECT 1 FROM pg_catalog.pg_proc WHERE proname='text' AND prosrc='SELECT textin(int8out($$1));'
                ) THEN NULL
                ELSE mktxtbigint()
                END;
            --next--
            DROP FUNCTION mktxtbigint();
            --next--
            CREATE USER ${nuxeo.db.user} WITH PASSWORD '${nuxeo.db.pass}';
            --next--
            CREATE DATABASE ${nuxeo.db.name} OWNER ${nuxeo.db.user} ENCODING='UTF-8';
    </sql>
  </target>

  <target name="mssql-dbdrop" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <sql driver="net.sourceforge.jtds.jdbc.Driver"
         url="jdbc:jtds:sqlserver://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
         userid="${nuxeo.dbsetup.adminuser}" password="${nuxeo.dbsetup.adminpass}"
         autocommit="true">
      IF EXISTS(SELECT * FROM SYS.DATABASES WHERE NAME='${nuxeo.db.name}')
         DROP DATABASE ${nuxeo.db.name};
      IF EXISTS(SELECT * FROM SYS.DATABASE_PRINCIPALS WHERE NAME='${nuxeo.db.user}' AND TYPE_DESC IN ('SQL_USER'))
         DROP USER ${nuxeo.db.user};
      IF EXISTS(SELECT * FROM SYS.SERVER_PRINCIPALS WHERE NAME='${nuxeo.db.user}' AND TYPE_DESC IN ('SQL_LOGIN'))
         DROP LOGIN ${nuxeo.db.user};
    </sql>
  </target>

  <target name="mssql-dbcreate" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <sql driver="net.sourceforge.jtds.jdbc.Driver"
         url="jdbc:jtds:sqlserver://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
         userid="${nuxeo.dbsetup.adminuser}" password="${nuxeo.dbsetup.adminpass}"
         autocommit="true">
      CREATE LOGIN ${nuxeo.db.user} WITH PASSWORD='${nuxeo.db.pass}';
      CREATE USER ${nuxeo.db.user} FROM LOGIN ${nuxeo.db.user};
      CREATE DATABASE ${nuxeo.db.name};
      ALTER AUTHORIZATION ON DATABASE::${nuxeo.db.name} TO ${nuxeo.db.user};
    </sql>
  </target>

  <target name="prepare-pgsql" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <echo>Prepare PostgreSQL...</echo>
    <antcall target="pgsql-dbdrop" />
    <antcall target="pgsql-dbcreate" />
  </target>

  <target name="prepare-mssql" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <echo>Prepare MSSQL...</echo>
    <antcall target="mssql-dbdrop" />
    <antcall target="mssql-dbcreate" />
  </target>

  <target name="prepare-db" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <nx:profile name="pgsql">
      <antcall target="prepare-pgsql" />
    </nx:profile>
    <nx:profile name="mssql">
      <antcall target="prepare-mssql" />
    </nx:profile>
    
  </target>

  <target name="prepare-environment"
          depends="_init"
          description="prepare all ressources for test">
    <antcall target="prepare-db" />
    <nx:profile name="tomcat">
      <antcall target="prepare-tomcat" />
    </nx:profile>
    <nx:profile name="jboss">
      <antcall target="prepare-jboss" />
    </nx:profile>
  </target>

  <target name="download" unless="zip.file">
    <unzip dest="${nuxeo.home}/">
      <artifact:resolveFile key="${groupId}:${artifactId}::zip:${classifier}" />
      <cutdirsmapper dirs="1" />
    </unzip>
  </target>
  <target name="unzip-local" if="zip.file">
    <echo message="Using local archive ${zip.file}" />
    <unzip dest="${nuxeo.home}/" src="${zip.file}">
      <cutdirsmapper dirs="1" />
    </unzip>
  </target>

  <target name="prepare-selenium"
          description="prepare Selenium files for tests">
    <copy tofile="${out.dir}/selenium-server.jar">
      <artifact:resolveFile key="org.seleniumhq.selenium:selenium-server::jar:standalone" />
    </copy>
    <echo>Replace local folder in user-extensions.js</echo>
    <path id="data.dir.path">
      <pathelement location="data" />
    </path>
    <pathconvert refid="data.dir.path" property="data.dir.path.for.currentos" />
    <copy file="${out.dir}/user-extensions.js.sample"
          tofile="${out.dir}/user-extensions.js"
          overwrite="true" />
    <echo>Set into user-extensions-browser.js project path ${data.dir.path.for.currentos}</echo>
    <antcall target="user-extensions" />
    <echo>Replace url in prefs.js</echo>
    <copy file="${out.dir}/ffprofile/prefs.js.sample"
          tofile="${out.dir}/ffprofile/prefs.js"
          overwrite="true" />
    <replace file="${out.dir}/ffprofile/prefs.js"
             token="ApplicationServerURL"
             value="${nuxeoURL}" />
  </target>

  <target name="user-extensions"
          depends="user-extensions-for-unix,user-extensions-for-windows">
  </target>
  <target name="user-extensions-for-windows" if="osfamily-windows">
    <replace file="${out.dir}/user-extensions.js"
             token="/path/to/project-ear/ftest/selenium/data/"
             value="${data.dir.path.for.currentos}\" />
    <replace file="${out.dir}/user-extensions.js" token="\" value="\\" />
  </target>
  <target name="user-extensions-for-unix" if="osfamily-unix">
    <replace file="${out.dir}/user-extensions.js"
             token="/path/to/project-ear/ftest/selenium/data/"
             value="${data.dir.path.for.currentos}/" />
  </target>

  <target name="start" depends="_init,stop,start-unix,start-windows" />
  <target name="start-unix" if="osfamily-unix">
    <chmod dir="${nuxeo.home}/bin" perm="ug+x" includes="*.sh,*ctl" />
    <exec executable="${nuxeo.home}/bin/nuxeoctl" spawn="false">
      <arg value="start" />
    </exec>
  </target>
  <target name="start-windows" if="osfamily-windows">
    <exec executable="${nuxeo.home}/bin/nuxeoctl.bat" spawn="false">
      <arg value="nogui" />
      <arg value="start" />
    </exec>
  </target>

  <target name="stop" depends="_init,stop-unix,stop-windows" />
  <target name="stop-unix" if="osfamily-unix">
    <chmod dir="${nuxeo.home}/bin" perm="ug+x" includes="*.sh,*ctl" />
    <exec executable="${nuxeo.home}/bin/nuxeoctl" spawn="false">
      <arg value="stop" />
    </exec>
  </target>
  <target name="stop-windows" if="osfamily-windows">
    <exec executable="${nuxeo.home}/bin/nuxeoctl.bat" spawn="false">
      <arg value="nogui" />
      <arg value="stop" />
    </exec>
  </target>

  <target name="wizard-on"
          depends="_init"
          description="DEPRECATED: call set-conf instead.">
    <echo append="true" file="${nuxeo.conf}">nuxeo.wizard.done=false${line.separator}</echo>
  </target>
  <target name="wizard-off"
          depends="_init"
          description="DEPRECATED: call set-conf instead.">
    <echo append="true" file="${nuxeo.conf}">nuxeo.wizard.done=true${line.separator}</echo>
  </target>

  <target name="set-java-home"
          if="env.NX_JAVA_HOME"
          depends="_init"
          description="Set JAVA_HOME in ${nuxeo.conf} with env.NX_JAVA_HOME value, if defined.">
    <antcall target="set-conf">
      <param name="name" value="JAVA_HOME" />
      <param name="value" value="${env.NX_JAVA_HOME}" />
    </antcall>
    <echo message="Using JAVA_HOME=${env.NX_JAVA_HOME}" />
  </target>

  <target name="set-nuxeoconf-db" depends="_init" if="nuxeo.dbsetup.donuxeoconf">
    <nx:profile name="pgsql">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="postgresl" />
      </antcall>
    </nx:profile>
    <nx:profile name="mssql">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="mssql" />
      </antcall>
    </nx:profile>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.host" />
      <param name="value" value="${nuxeo.db.host}" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.port" />
      <param name="value" value="${nuxeo.db.port}" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.name" />
      <param name="value" value="${nuxeo.db.name}" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.user" />
      <param name="value" value="${nuxeo.db.user}" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.pass" />
      <param name="value" value="${nuxeo.db.pass}" />
    </antcall>
  </target>

  <target name="nuxeo-conf"
          depends="_init,set-java-home"
          description="Configure ${nuxeo.conf} depending on environment values.">
    <!-- activate logs for Selenium tests -->
    <antcall target="set-conf">
      <param name="name" value="org.nuxeo.systemlog.token" />
      <param name="value" value="dolog" />
    </antcall>
    <antcall target="set-nuxeoconf-db" />
  </target>

  <target name="set-conf"
          depends="_init"
          description="Add property to ${nuxeo.conf} with ${name}=${value}">
    <echo append="true" file="${nuxeo.conf}">${name}=${value}${line.separator}</echo>
  </target>

</project>
