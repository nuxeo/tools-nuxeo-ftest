<project name="nuxeo-ftest"
         default="run-selenium"
         xmlns:nx="urn:nuxeo-build"
         xmlns:artifact="urn:nuxeo-artifact"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless">
  <taskdef resource="org/nuxeo/build/antlib.xml" uri="urn:nuxeo-build" />
  <taskdef resource="org/nuxeo/build/artifact/antlib.xml" uri="urn:nuxeo-artifact" />
  <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <property name="nuxeoURL" value="http://localhost:8080/nuxeo/" />
  <property name="browser" value="chrome" />
  <property name="out.dir" value="${maven.project.build.directory}" />
  <property name="jdbc.dir" value="${out.dir}/jdbc-libs" />
  <property name="suites" value="null" />

  <!-- FunkLoad support -->
  <propertyregex property="nuxeoURLNoEndingSlash"
                 input="${nuxeoURL}"
                 regexp="(.*)/"
                 select="\1"
                 defaultValue="${nuxeoURL}" />
  <property name="monitorConf" value="monitor.conf" />
  <property name="credentialsConf" value="credential.conf" />

  <!-- Oracle drivers are not available in public maven repositories.
         They need to be available in a local/private repository -->
  <property name="oracle10g.driver.version" value="10.2.0.5" />
  <property name="oracle11g.driver.version" value="11.2.0.2" />
  <property name="oracle12c.driver.version" value="12.1.0.1" />

  <target name="_initdb" unless="_initdb.done">
    <property name="_initdb.done" value="true" />
    <property environment="env" />
    <!-- Generate random id. It will be used
    when NX_DB_NAME, NX_DB_USER or NX_DB_PASS are not specified -->
    <math result="randomresult">
      <op op="rint">
        <op op="*">
          <num value="999999" />
          <op op="random" />
        </op>
      </op>
    </math>
    <propertyregex property="rndid" input="${randomresult}" regexp="([^\.]*)\.0" select="\1" />
    <!-- put db profile used into a property for later use -->
    <nx:profile name="pgsql">
      <property name="maven.dbprofile" value="PGSQL" />
    </nx:profile>
    <nx:profile name="mssql">
      <property name="maven.dbprofile" value="MSSQL" />
    </nx:profile>
    <nx:profile name="oracle10g">
      <property name="maven.dbprofile" value="ORACLE10G" />
    </nx:profile>
    <nx:profile name="oracle11g">
      <property name="maven.dbprofile" value="ORACLE11G" />
    </nx:profile>
    <nx:profile name="oracle12c">
      <property name="maven.dbprofile" value="ORACLE12C" />
    </nx:profile>
    <nx:profile name="mysql">
      <property name="maven.dbprofile" value="MYSQL" />
    </nx:profile>
    <nx:profile name="mariadb">
      <property name="maven.dbprofile" value="MARIADB" />
    </nx:profile>
    <if>
      <or>
        <isset property="maven.profile.oracle10g" />
        <isset property="maven.profile.oracle11g" />
        <isset property="maven.profile.oracle12c" />
      </or>
      <then>
        <property name="maven.profile.oracle" value="true" />
        <nx:profile activate="oracle" />
      </then>
    </if>
    <if>
      <or>
        <isset property="maven.profile.mysql" />
        <isset property="maven.profile.mariadb" />
      </or>
      <then>
        <property name="maven.profile-type.mysql" value="true" />
      </then>
    </if>

    <!-- if NX_DB_SOMETHING is not defined, try to fallback on NX_${maven.dbprofile}_DB_SOMETHING -->
    <for list="HOST,PORT,NAME,USER,PASS,ADMINNAME,ADMINUSER,ADMINPASS" param="dbvar">
      <sequential>
        <if>
          <and>
            <not>
              <isset property="env.NX_DB_@{dbvar}" />
            </not>
            <isset property="env.NX_${maven.dbprofile}_DB_@{dbvar}" />
          </and>
          <then>
            <propertycopy property="env.NX_DB_@{dbvar}" from="env.NX_${maven.dbprofile}_DB_@{dbvar}" silent="false" />
            <echo level="info">Using NX_${maven.dbprofile}_DB_@{dbvar} fallback for undefined NX_DB_@{dbvar}</echo>
          </then>
        </if>
      </sequential>
    </for>
    <!-- set nuxeo.db.host to NX_DB_HOST env property if defined -->
    <condition property="nuxeo.db.host" value="${env.NX_DB_HOST}" else="${nuxeo.db.host.default}">
      <isset property="env.NX_DB_HOST" />
    </condition>
    <!-- set nuxeo.db.port to NX_DB_PORT env property if defined -->
    <condition property="nuxeo.db.port" value="${env.NX_DB_PORT}" else="${nuxeo.db.port.default}">
      <isset property="env.NX_DB_PORT" />
    </condition>
    <!-- set nuxeo.db.name to NX_DB_NAME env property if defined -->
    <condition property="nuxeo.db.name" value="${env.NX_DB_NAME}" else="nxdbname${rndid}">
      <isset property="env.NX_DB_NAME" />
    </condition>
    <!-- set nuxeo.db.user to NX_DB_USER env property if defined -->
    <condition property="nuxeo.db.user" value="${env.NX_DB_USER}" else="nxdbuser${rndid}">
      <isset property="env.NX_DB_USER" />
    </condition>
    <!-- set nuxeo.db.pass to NX_DB_PASS env property if defined -->
    <condition property="nuxeo.db.pass" value="${env.NX_DB_PASS}" else="nxdbpass${rndid}">
      <isset property="env.NX_DB_PASS" />
    </condition>
    <!-- set nuxeo.dbsetup.adminname to NX_DB_ADMINNAME env property if defined -->
    <condition property="nuxeo.dbsetup.adminname" value="${env.NX_DB_ADMINNAME}">
      <isset property="env.NX_DB_ADMINNAME" />
    </condition>
    <!-- set nuxeo.dbsetup.adminuser to NX_DB_ADMINUSER env property if defined -->
    <condition property="nuxeo.dbsetup.adminuser" value="${env.NX_DB_ADMINUSER}">
      <isset property="env.NX_DB_ADMINUSER" />
    </condition>
    <!-- set nuxeo.dbsetup.adminpass to NX_DB_ADMINPASS env property if defined -->
    <condition property="nuxeo.dbsetup.adminpass" value="${env.NX_DB_ADMINPASS}">
      <isset property="env.NX_DB_ADMINPASS" />
    </condition>
    <!-- check required parameters -->
    <if>
      <isset property="maven.dbprofile" />
      <then>
        <!-- give a warning when a db profile is selected but db administration parameters are missing -->
        <var name="error.msg"
             value="Profile ${maven.dbprofile} is selected but database administration parameters are missing:${line.separator}" />
        <for list="nuxeo.dbsetup.adminname,env.NX_DB_ADMINNAME,env.NX_${maven.dbprofile}_DB_ADMINNAME,
                   nuxeo.dbsetup.adminuser,env.NX_DB_ADMINUSER,env.NX_${maven.dbprofile}_DB_ADMINUSER,
                   nuxeo.dbsetup.adminpass,env.NX_DB_ADMINPASS,env.NX_${maven.dbprofile}_DB_ADMINPASS"
             param="dbparam"
             trim="true">
          <sequential>
            <if>
              <not>
                <isset property="@{dbparam}" />
              </not>
              <then>
                <var name="error.msg" value="${error.msg}@{dbparam} is not set${line.separator}" />
                <property name="dbadminparam.fail" value="true" />
              </then>
            </if>
          </sequential>
        </for>
        <if>
          <isset property="dbadminparam.fail" />
          <then>
            <echo level="warning" message="${error.msg}" />
          </then>
        </if>
      </then>
    </if>
    <condition property="nuxeo.dbsetup.dodbconf" value="true">
      <or>
        <isset property="maven.dbprofile" />
        <isset property="maven.profile.mongodb" />
      </or>
    </condition>

    <condition property="nuxeo.mongodb.server" value="${env.NX_MONGODB_SERVER}" else="${nuxeo.mongodb.server.default}">
      <isset property="env.NX_MONGODB_SERVER" />
    </condition>
    <condition property="nuxeo.mongodb.dbname" value="${env.NX_MONGODB_DBNAME}" else="nxdbname${rndid}">
      <isset property="env.NX_MONGODB_DBNAME" />
    </condition>
  </target>

  <target name="_init" unless="_init.done" depends="_initdb">
    <property name="_init.done" value="true" />
    <nx:exit message="Tests are skipped (maven.test.skip=true)." status="0" if="${maven.test.skip}" />
    <nx:exit message="Tests are skipped (skipTests=true)." status="0" if="${skipTests}" />
    <nx:exit message="Tests are skipped (skipITs=true)." status="0" if="${skipITs}" />

    <condition property="osfamily-unix">
      <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
      <os family="windows" />
    </condition>
    <property name="is.tomcat" value="true" />
    <!-- Set nuxeo.home to NUXEO_HOME env property if defined,
    else set to ${out.dir}/tomcat -->
    <condition property="nuxeo.home" value="${env.NUXEO_HOME}" else="${out.dir}/tomcat">
      <isset property="env.NUXEO_HOME" />
    </condition>
    <condition property="no.download">
      <or>
        <isset property="zip.file" />
        <isset property="env.NUXEO_HOME" />
      </or>
    </condition>
    <!-- Set nuxeo.conf to NUXEO_CONF env property if defined,
    else set to ${nuxeo.home}/bin/nuxeo.conf -->
    <condition property="nuxeo.conf" value="${env.NUXEO_CONF}" else="${nuxeo.home}/bin/nuxeo.conf">
      <isset property="env.NUXEO_CONF" />
    </condition>
    <!-- set nxserver dir -->
    <property name="nuxeo.nxserver" value="${nuxeo.home}/nxserver" />
    <!-- set data dir -->
    <property name="nuxeo.data" value="${nuxeo.home}/nxserver/data" />

    <!-- metrics -->
    <condition property="metrics.tomcat.enabled" value="true" else="false">
      <isset property="is.tomcat" />
    </condition>
    <condition property="metrics.graphite.enabled" value="true" else="false">
      <isset property="env.NX_METRICS_GRAPHITE_HOST" />
    </condition>
    <condition property="metrics.graphite.host" value="${env.NX_METRICS_GRAPHITE_HOST}" else="localhost">
      <isset property="env.NX_METRICS_GRAPHITE_HOST" />
    </condition>
    <condition property="metrics.graphite.port" value="${env.NX_METRICS_GRAPHITE_PORT}" else="2030">
      <isset property="env.NX_METRICS_GRAPHITE_PORT" />
    </condition>
    <condition property="metrics.graphite.period" value="${env.NX_METRICS_GRAPHITE_PERIOD}" else="10">
      <isset property="env.NX_METRICS_GRAPHITE_PERIOD" />
    </condition>
    <condition property="metrics.csv.enabled" value="true" else="false">
      <isset property="env.NX_METRICS_CSV" />
    </condition>
    <condition property="metrics.csv.period" value="${env.NX_METRICS_CSV_PERIOD}" else="10">
      <isset property="env.NX_METRICS_CSV_PERIOD" />
    </condition>
    <condition property="launcher.debug" value="${env.LAUNCHER_DEBUG}">
      <and>
        <isset property="env.LAUNCHER_DEBUG" />
        <not>
          <isset property="launcher.debug" />
        </not>
      </and>
    </condition>
    <condition property="launcher.debug" value="">
      <not>
        <isset property="launcher.debug" />
      </not>
    </condition>
    <!-- Mail server -->
    <condition property="mail.transport.host" value="${env.MAIL_TRANSPORT_HOST}">
      <isset property="env.MAIL_TRANSPORT_HOST" />
    </condition>
    <condition property="mail.transport.port" value="${env.MAIL_TRANSPORT_PORT}">
      <isset property="env.MAIL_TRANSPORT_PORT" />
    </condition>
    <condition property="mail.transport.protocol" value="${env.MAIL_TRANSPORT_PROTOCOL}">
      <isset property="env.MAIL_TRANSPORT_PROTOCOL" />
    </condition>
    <condition property="mail.transport.usetls" value="${env.MAIL_TRANSPORT_USETLS}">
      <isset property="env.MAIL_TRANSPORT_USETLS" />
    </condition>
    <condition property="mail.transport.auth" value="${env.MAIL_TRANSPORT_AUTH}">
      <isset property="env.MAIL_TRANSPORT_AUTH" />
    </condition>
    <condition property="mail.transport.user" value="${env.MAIL_TRANSPORT_USER}">
      <isset property="env.MAIL_TRANSPORT_USER" />
    </condition>
    <condition property="mail.transport.password" value="${env.MAIL_TRANSPORT_PASSWORD}">
      <isset property="env.MAIL_TRANSPORT_PASSWORD" />
    </condition>
    <condition property="nuxeo.mailserver.set" value="true">
      <or>
        <isset property="mail.transport.port" />
        <isset property="mail.transport.host" />
        <isset property="mail.transport.protocol" />
        <isset property="mail.transport.usetls" />
        <isset property="mail.transport.auth" />
        <isset property="mail.transport.user" />
        <isset property="mail.transport.password" />
      </or>
    </condition>
    <condition property="test.clid.path" value="${env.TEST_CLID_PATH}">
      <and>
        <not>
          <isset property="test.clid.path" />
        </not>
        <isset property="env.TEST_CLID_PATH" />
      </and>
    </condition>
    <if>
      <not>
        <isset property="test.clid.path" />
      </not>
      <then>
        <condition property="test.clid.path" value="/opt/build/hudson/instance.clid" else="c:/instance.clid">
          <isset property="osfamily-unix" />
        </condition>
      </then>
    </if>
    <condition property="nuxeoctl.option.clid" value="--clid=${test.clid.path}" else="">
      <and>
        <not>
          <isset property="nuxeoctl.option.clid" />
        </not>
        <isset property="test.clid.path" />
        <available file="${test.clid.path}" />
      </and>
    </condition>
  </target>

  <target name="debug" depends="_init">
    <echoproperties />
  </target>

  <target name="selenium-run-suite">
    <echo level="info">Suite: ${suite}</echo>
    <exec executable="java" output="${out.dir}/selenium-${suite}.log" resultproperty="exitCode" failonerror="false">
      <arg line="${standard.selenium.args1}" />
      <arg line="${standard.selenium.args2}/selenium-debug-${suite}.log" />
      <arg line="${standard.selenium.args3}" />
      <arg line="${standard.selenium.args4}" />
      <arg line="${standard.selenium.args5}" />
      <arg line="${standard.selenium.args6}" />
      <arg line="tests/${suite}.html" />
      <arg line="${out.dir}/results/result-${suite}.html" />
      <arg line="${browser.specific.selenium.arg}" />
    </exec>
    <math result="tmperr" operation="+" operand1="${errors}" operand2="${exitCode}" datatype="int" />
    <var name="errors" value="${tmperr}" />
    <if>
      <not>
        <equals arg1="${exitCode}" arg2="0" />
      </not>
      <then>
        <var name="errmsg" value="${errmsg} ${suite}," />
      </then>
    </if>
  </target>

  <target name="run-selenium" depends="_init">
    <antcall target="prepare-selenium" />

    <if>
      <or>
        <equals arg1="${browser}" arg2="chrome" />
        <equals arg1="${browser}" arg2="firefox-3.6" />
      </or>
      <then>
        <property name="selbrowser" value="*chrome" />
        <property name="browser.specific.selenium.arg" value="-firefoxProfileTemplate ${out.dir}/ffprofile" />
      </then>
      <elseif>
        <equals arg1="${browser}" arg2="googlechrome" />
        <then>
          <property name="selbrowser" value="*googlechrome" />
          <property name="browser.specific.selenium.arg" value="" />
        </then>
      </elseif>
      <else>
        <property name="selbrowser" value="'*${browser}'" />
        <property name="browser.specific.selenium.arg" value="" />
      </else>
    </if>

    <property name="standard.selenium.args1" value="-jar ${out.dir}/selenium-server.jar" />
    <property name="standard.selenium.args2" value="-log ${out.dir}" />
    <property name="standard.selenium.args3" value="-port 14440" />
    <property name="standard.selenium.args4" value="-timeout 7200" />
    <property name="standard.selenium.args5" value="-userExtensions ${out.dir}/user-extensions.js" />
    <property name="standard.selenium.args6" value="-htmlSuite ${selbrowser} ${nuxeoURL}" />

    <mkdir dir="${out.dir}/results" />
    <echo level="info">java ${standard.selenium.args1} ${standard.selenium.args2}/selenium-debug-${suite}.log ${standard.selenium.args3}
      ${standard.selenium.args4} ${standard.selenium.args5} ${standard.selenium.args6}
      tests/${suite}.html ${out.dir}/results/result-${suite}.html ${browser.specific.selenium.arg}
      >${out.dir}/selenium-${suite}.log
      with ${suite} in ${suites}
    </echo>
    <var name="errors" value="0" />
    <var name="errmsg" value="Suites in error: " />
    <for list="${suites}" param="suite">
      <sequential>
        <antcallback target="selenium-run-suite" return="errors,errmsg">
          <param name="suite" value="@{suite}" />
        </antcallback>
      </sequential>
    </for>

    <propertyregex property="errormessage"
                   override="true"
                   input="${errmsg}"
                   regexp="(.*),"
                   select="\1"
                   defaultValue="${errmsg}" />

    <fail status="${errors}" message="${errormessage}">
      <condition>
        <not>
          <equals arg1="${errors}" arg2="0" />
        </not>
      </condition>
    </fail>
  </target>

  <target name="prepare-monitor" depends="_init" if="osfamily-unix">
    <nx:profile name="monitor">
      <echo level="info">Prepare Monitoring...</echo>
      <chmod dir="${nuxeo.home}/bin" perm="ug+x" includes="monitorctl.sh" />
      <antcall target="set-conf">
        <param name="name" value="JAVA_OPTS" />
        <param name="value"
               value="$JAVA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1089 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dorg.nuxeo.vcs.cache.statistics=true" />
      </antcall>
      <antcall target="set-conf">
        <param name="name" value="JAVA_OPTS" />
        <param name="value"
               value="$JAVA_OPTS -Xloggc:${nuxeo.log.dir}/gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps" />
      </antcall>
      <nx:profile name="pgsql">
        <antcall target="set-conf">
          <param name="name" value="PG_LOG" />
          <param name="value" value="/var/log/pgsql" />
        </antcall>
      </nx:profile>
      <antcall target="set-conf">
        <param name="name" value="metrics.log4j.enabled" />
        <param name="value" value="true" />
      </antcall>
      <antcall target="set-conf">
        <param name="name" value="metrics.tomcat.enabled" />
        <param name="value" value="${metrics.tomcat.enabled}" />
      </antcall>
      <antcall target="set-conf">
        <param name="name" value="metrics.graphite.enabled" />
        <param name="value" value="${metrics.graphite.enabled}" />
      </antcall>
      <antcall target="set-conf">
        <param name="name" value="metrics.graphite.host" />
        <param name="value" value="${metrics.graphite.host}" />
      </antcall>
      <antcall target="set-conf">
        <param name="name" value="metrics.graphite.port" />
        <param name="value" value="${metrics.graphite.port}" />
      </antcall>
      <antcall target="set-conf">
        <param name="name" value="metrics.graphite.period" />
        <param name="value" value="${metrics.graphite.period}" />
      </antcall>
      <antcall target="set-conf">
        <param name="name" value="metrics.csv.enabled" />
        <param name="value" value="${metrics.csv.enabled}" />
      </antcall>
      <antcall target="set-conf">
        <param name="name" value="metrics.csv.period" />
        <param name="value" value="${metrics.csv.period}" />
      </antcall>
    </nx:profile>
  </target>

  <target name="prepare-bench" depends="_init" if="osfamily-unix">
    <antcall target="set-conf">
      <param name="name" value="JAVA_OPTS" />
      <param name="value" value="$JAVA_OPTS -Xms2g -Xmx2g -XX:MaxPermSize=512m" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.min-pool-size" />
      <param name="value" value="10" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.vcs.min-pool-size" />
      <param name="value" value="10" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.max-pool-size" />
      <param name="value" value="50" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.vcs.max-pool-size" />
      <param name="value" value="50" />
    </antcall>
    <echo level="info">Add importer</echo>
    <copy todir="${nuxeo.nxserver}/bundles/">
      <artifact:file key="org.nuxeo.ecm.platform:nuxeo-importer-core" />
      <artifact:file key="org.nuxeo.ecm.platform:nuxeo-importer-jaxrs" />
    </copy>
  </target>

  <target name="build-funkload-report" depends="_init" if="osfamily-unix">
    <if>
      <not>
        <isset property="output-report" />
      </not>
      <then>
        <var name="output-report" value="funkload" />
      </then>
    </if>
    <exec executable="fl-build-report" failonerror="false">
      <arg line="--html ${resultFile} -r ${out.dir}/results/${output-report}" />
    </exec>
  </target>

  <target name="monitor" depends="_init" if="osfamily-unix">
    <exec executable="${nuxeo.home}/bin/monitorctl.sh" spawn="false" failonerror="false">
      <arg value="${action}" />
    </exec>
  </target>

  <target name="build-monitor-report" depends="_init" if="osfamily-unix">
    <echo level="info">Building monitoring report</echo>
    <if>
      <not>
        <isset property="output-report" />
      </not>
      <then>
        <var name="output-report" value="monitoring" />
      </then>
    </if>
    <exec executable="logchart" failonerror="false">
      <arg line="${nuxeo.home}/log ${out.dir}/results/${output-report}" />
    </exec>
  </target>

  <target name="funkload-ctl-daemons">
    <exec executable="fl-monitor-ctl" failonerror="false">
      <arg value="${monitorConf}" />
      <arg value="${action}" />
    </exec>
    <exec executable="fl-credential-ctl" failonerror="true">
      <arg value="${credentialsConf}" />
      <arg value="${action}" />
    </exec>
  </target>

  <target name="fl-run-suite">
    <echo level="info">Suite: ${suite}</echo>
    <echo level="info">Running: fl-run-test -v --simple-fetch ${suite} -u ${nuxeoURLNoEndingSlash} --no-color</echo>
    <exec executable="fl-run-test" failonerror="false" resultProperty="exitCode">
      <arg line="-v --simple-fetch ${suite} -u ${nuxeoURLNoEndingSlash} --no-color" />
    </exec>
    <math result="tmperr" operation="+" operand1="${errors}" operand2="${exitCode}" datatype="int" />
    <var name="errors" value="${tmperr}" />
    <if>
      <not>
        <equals arg1="${exitCode}" arg2="0" />
      </not>
      <then>
        <var name="errmsg" value="${errmsg} ${suite}," />
      </then>
    </if>
  </target>

  <target name="fl-run-tests">
    <for list="${tests}" param="test" delimiter=":" trim="true">
      <sequential>
        <echo level="info">Suite: ${suite} - Test: @{test}</echo>
        <echo level="info">Running: fl-run-test -v --simple-fetch ${suite} -e @{test} -u ${nuxeoURLNoEndingSlash} --no-color</echo>
        <exec executable="fl-run-test" failonerror="false" resultProperty="exitCode">
          <arg line="-v --simple-fetch ${suite} -e @{test} -u ${nuxeoURLNoEndingSlash} --no-color" />
        </exec>
        <math result="tmperr" operation="+" operand1="${errors}" operand2="${exitCode}" datatype="int" />
        <var name="errors" value="${tmperr}" />
        <if>
          <not>
            <equals arg1="${exitCode}" arg2="0" />
          </not>
          <then>
            <var name="errmsg" value="${errmsg} ${suite}:@{test}," />
          </then>
        </if>
      </sequential>
    </for>
  </target>

  <target name="run-funkload-tests" depends="_init">
    <!-- Run FunLoad tests -->
    <mkdir dir="${out.dir}/results" />
    <mkdir dir="${out.dir}/log" />
    <var name="errors" value="0" />
    <var name="errmsg" value="Tests in error: " />
    <antcall target="funkload-ctl-daemons">
      <param name="action" value="start" />
    </antcall>
    <antcall target="funkload-ctl-daemons">
      <param name="action" value="test" />
    </antcall>
    <nx:profile name="monitor">
      <antcall target="monitor">
        <param name="action" value="start" />
      </antcall>
    </nx:profile>

    <!-- TESTS START -->
    <for list="${funkload-tests}" param="funkload-test" trim="true">
      <sequential>
        <echo level="info">Handling list element: @{funkload-test}</echo>
        <propertyregex property="flsuite" override="true" input="@{funkload-test}" regexp="([^\[]+).*" select="\1" />
        <propertyregex property="fltests"
                       override="true"
                       input="@{funkload-test}"
                       regexp=".+\[(.*)\]"
                       select="\1"
                       defaultValue="" />
        <if>
          <not>
            <equals arg1="${fltests}" arg2="" />
          </not>
          <then>
            <antcallback target="fl-run-tests" return="errors,errmsg">
              <param name="suite" value="${flsuite}" />
              <param name="tests" value="${fltests}" />
            </antcallback>
          </then>
          <else>
            <antcallback target="fl-run-suite" return="errors,errmsg">
              <param name="suite" value="${flsuite}" />
            </antcallback>
          </else>
        </if>
      </sequential>
    </for>
    <!-- TESTS END -->
    <nx:profile name="monitor">
      <antcall target="monitor">
        <param name="action" value="stop" />
      </antcall>
      <antcall target="build-monitor-report" />
    </nx:profile>
    <antcall target="funkload-ctl-daemons">
      <param name="action" value="stop" />
    </antcall>
    <!-- Set exit status -->
    <propertyregex property="errormessage"
                   override="true"
                   input="${errmsg}"
                   regexp="(.*),"
                   select="\1"
                   defaultValue="${errmsg}" />
    <fail status="${errors}" message="${errormessage}">
      <condition>
        <not>
          <equals arg1="${errors}" arg2="0" />
        </not>
      </condition>
    </fail>
  </target>

  <target name="run-importer">
    <!-- warm up -->
    <exec executable="curl" failonerror="false">
      <arg line="-s -v -u Administrator:Administrator" />
      <arg line="${nuxeoURLNoEndingSlash}/site/randomImporter/run?targetPath=${load-path}&amp;batchSize=10&amp;nbThreads=1&amp;interactive=true&amp;nbNodes=5&amp;fileSizeKB=${load-fileSize}&amp;bulkMode=true&amp;onlyText=false" />
    </exec>
    <nx:profile name="monitor">
      <antcall target="monitor">
        <param name="action" value="start" />
      </antcall>
    </nx:profile>
    <exec executable="curl" failonerror="false">
      <arg line="-s -v -u Administrator:Administrator" />
      <arg line="${nuxeoURLNoEndingSlash}/site/randomImporter/run?targetPath=${load-path}&amp;batchSize=10&amp;nbThreads=${load-thread}&amp;interactive=true&amp;nbNodes=${load-nodes}&amp;fileSizeKB=${load-fileSize}&amp;bulkMode=true&amp;onlyText=false" />
    </exec>
    <nx:profile name="monitor">
      <antcall target="monitor">
        <param name="action" value="stop" />
      </antcall>
      <antcall target="build-monitor-report">
        <param name="output-report" value="${bench-name}/monitor" />
      </antcall>
    </nx:profile>
    <move todir="${out.dir}/results/${bench-name}">
      <fileset dir="${nuxeo.nxserver}">
        <include name="*.csv" />
      </fileset>
    </move>
  </target>

  <target name="run-funkload-bench">
    <mkdir dir="${out.dir}/results" />
    <mkdir dir="${out.dir}/results/${bench-name}" />
    <mkdir dir="${out.dir}/log" />
    <mkdir dir="${out.dir}/log/${bench-name}" />
    <var name="errors" value="0" />
    <var name="errmsg" value="Tests in error: " />

    <if>
      <not>
        <isset property="fl-options" />
      </not>
      <then>
        <var name="fl-options" value="" />
      </then>
    </if>

    <echo level="info">WARMUP --------------------</echo>
    <exec executable="fl-run-bench" failonerror="false">
      <arg line="-c 10 -f -D 30 -s 1 --simple-fetch -u ${nuxeoURLNoEndingSlash} --no-color  ${fl-suite} ${fl-test}" />
    </exec>

    <nx:profile name="monitor">
      <antcall target="monitor">
        <param name="action" value="start" />
      </antcall>
    </nx:profile>
    <echo level="info">BENCH: fl-run-bench ${fl-options} --simple-fetch -u ${nuxeoURLNoEndingSlash} --no-color  ${fl-suite} ${fl-test} --------------------</echo>
    <exec executable="fl-run-bench" failonerror="false">
      <arg line="${fl-options} --simple-fetch -u ${nuxeoURLNoEndingSlash} --no-color  ${fl-suite} ${fl-test}" />
    </exec>

    <nx:profile name="monitor">
      <antcall target="monitor">
        <param name="action" value="stop" />
      </antcall>
      <antcall target="build-monitor-report">
        <param name="output-report" value="${bench-name}/monitor" />
      </antcall>
    </nx:profile>

    <antcall target="build-funkload-report">
      <param name="resultFile" value="${fl-result}" />
      <param name="output-report" value="${bench-name}/funkload" />
    </antcall>
  </target>


  <target name="run-funkload-benchs" depends="_init">
    <!-- Run FunLoad bench -->
    <mkdir dir="${out.dir}/results" />
    <mkdir dir="${out.dir}/log" />
    <var name="errors" value="0" />
    <var name="errmsg" value="Tests in error: " />

    <antcall target="funkload-ctl-daemons">
      <param name="action" value="start" />
    </antcall>
    <for list="${funkload-benchs}" param="bench-name" trim="true">
      <sequential>
        <mkdir dir="${out.dir}/results/@{bench-name}" />
        <if>
          <equals arg1="@{bench-name}" arg2="reader-memory" />
          <then>
            <copy file="${nuxeo.conf}" tofile="${nuxeo.conf}.bak" overwrite="true" />
            <antcall target="set-conf">
              <param name="name" value="JAVA_OPTS" />
              <param name="value" value="$JAVA_OPTS -Xms1g -Xmx1g -XX:MaxPermSize=512m" />
            </antcall>
          </then>
        </if>
        <antcall target="restart-unix" />
        <if>
          <equals arg1="@{bench-name}" arg2="init" />
          <then>
            <echo level="info">BENCH INIT --------------------</echo>
            <!-- setup bench config used at the next restart -->
            <antcall target="prepare-bench" />
            <!-- initialize user and rights -->
            <antcallback target="fl-run-tests" return="errors,errmsg">
              <param name="suite" value="test_nuxeo.py" />
              <param name="tests" value="testInit" />
            </antcallback>
            <!-- Set exit status -->
            <propertyregex property="errormessage"
                           override="true"
                           input="${errmsg}"
                           regexp="(.*),"
                           select="\1"
                           defaultValue="${errmsg}" />
            <fail status="${errors}" message="${errormessage}">
              <condition>
                <not>
                  <equals arg1="${errors}" arg2="0" />
                </not>
              </condition>
            </fail>
            <!-- initialize drive -->
            <antcallback target="fl-run-tests" return="errors,errmsg">
              <param name="suite" value="test_drive.py" />
              <param name="tests" value="testInit" />
            </antcallback>
            <propertyregex property="errormessage"
                           override="true"
                           input="${errmsg}"
                           regexp="(.*),"
                           select="\1"
                           defaultValue="${errmsg}" />
            <fail status="${errors}" message="${errormessage}">
              <condition>
                <not>
                  <equals arg1="${errors}" arg2="0" />
                </not>
              </condition>
            </fail>
          </then>
          <elseif>
            <equals arg1="@{bench-name}" arg2="load" />
            <then>
              <echo level="info">BENCH LOAD DATA --------------------</echo>
              <antcall target="run-importer">
                <param name="bench-name" value="@{bench-name}" />
              </antcall>
            </then>
          </elseif>
          <elseif>
            <equals arg1="@{bench-name}" arg2="writer-disk" />
            <then>
              <echo level="info">BENCH WRITER DISK --------------------</echo>
              <antcall target="run-funkload-bench">
                <param name="fl-suite" value="test_nuxeo.py" />
                <param name="fl-test" value="Nuxeo.testWriter" />
                <param name="fl-result" value="${out.dir}/log/nuxeo-bench.xml" />
                <param name="bench-name" value="@{bench-name}" />
              </antcall>
            </then>
          </elseif>
          <elseif>
            <equals arg1="@{bench-name}" arg2="reader-cpu" />
            <then>
              <echo level="info">BENCH READER CPU --------------------</echo>
              <antcall target="run-funkload-bench">
                <param name="fl-suite" value="test_nuxeo.py" />
                <param name="fl-test" value="Nuxeo.testReader" />
                <param name="fl-result" value="${out.dir}/log/nuxeo-bench.xml" />
                <param name="bench-name" value="@{bench-name}" />
              </antcall>
            </then>
          </elseif>
          <elseif>
            <equals arg1="@{bench-name}" arg2="reader-memory" />
            <then>
              <echo level="info">BENCH READER MEMORY --------------------</echo>
              <antcall target="run-funkload-bench">
                <param name="fl-suite" value="test_nuxeo.py" />
                <param name="fl-test" value="Nuxeo.testReader" />
                <param name="fl-result" value="${out.dir}/log/nuxeo-bench.xml" />
                <param name="bench-name" value="@{bench-name}" />
              </antcall>
              <copy file="${nuxeo.conf}.bak" tofile="${nuxeo.conf}" overwrite="true" />
            </then>
          </elseif>
          <elseif>
            <equals arg1="@{bench-name}" arg2="drive" />
            <then>
              <echo level="info">BENCH DRIVE --------------------</echo>
              <antcall target="run-funkload-bench">
                <param name="fl-suite" value="test_drive.py" />
                <param name="fl-test" value="Drive.testDrive" />
                <param name="fl-result" value="${out.dir}/log/drive-bench.xml" />
                <param name="bench-name" value="@{bench-name}" />
              </antcall>
            </then>
          </elseif>
          <else>
            <echo level="error">Unknown bench task: @{bench-name}</echo>
          </else>
        </if>
        <!-- RESTART -->
        <antcall target="stop-unix" />
        <move file="${nuxeo.home}/log" todir="${out.dir}/results/@{bench-name}" />
      </sequential>
    </for>
    <!-- TESTS END -->
    <antcall target="funkload-ctl-daemons">
      <param name="action" value="stop" />
    </antcall>

    <antcall target="funkload-ctl-daemons">
      <param name="action" value="stop" />
    </antcall>
    <!-- Set exit status -->
    <propertyregex property="errormessage"
                   override="true"
                   input="${errmsg}"
                   regexp="(.*),"
                   select="\1"
                   defaultValue="${errmsg}" />
    <fail status="${errors}" message="${errormessage}">
      <condition>
        <not>
          <equals arg1="${errors}" arg2="0" />
        </not>
      </condition>
    </fail>
  </target>

  <target name="prepare-tomcat" depends="_init" if="is.tomcat">
    <echo level="info">Prepare Tomcat...</echo>
    <property name="server.gav" value="org.nuxeo.ecm.distribution:nuxeo-server-tomcat::zip" />
    <antcall target="prepare-server" />
    <nx:profile name="oracle10g">
      <copy todir="${nuxeo.home}/lib/">
        <artifact:resolveFile key="com.oracle:ojdbc14:${oracle10g.driver.version}:jar" />
      </copy>
    </nx:profile>
    <nx:profile name="oracle11g">
      <copy todir="${nuxeo.home}/lib/">
        <artifact:resolveFile key="com.oracle:ojdbc6:${oracle11g.driver.version}:jar" />
      </copy>
    </nx:profile>
    <nx:profile name="oracle12c">
      <copy todir="${nuxeo.home}/lib/">
        <artifact:resolveFile key="com.oracle:ojdbc7:${oracle12c.driver.version}:jar" />
      </copy>
    </nx:profile>
  </target>

  <target name="prepare-tomcat-logs-trace-storage" depends="_init" if="is.tomcat">
    <echo level="info">Prepare Tomcat storage TRACE logs...</echo>
    <replace file="${nuxeo.home}/lib/log4j.xml">
      <replacetoken><![CDATA[  <category name="org.nuxeo">
]]></replacetoken>
      <replacevalue><![CDATA[  <category name="org.nuxeo.ecm.core.storage.sql.jdbc">
    <priority value="TRACE" />
  </category>
  <category name="org.nuxeo.ecm.core.storage.mongodb.MongoDBRepository">
    <priority value="TRACE" />
  </category>
  <category name="org.nuxeo.ecm.core.storage.mem.MemRepository">
    <priority value="TRACE" />
  </category>
  <category name="org.nuxeo">
]]></replacevalue>
    </replace>
  </target>

  <target name="prepare-server">
    <antcall target="download" />
    <antcall target="unzip-local" />
    <antcall target="nuxeo-conf" />
    <antcall target="fix-max-waits" />
    <antcall target="activate-wizard-preset" />
    <antcall target="mp-install" />
  </target>

  <target name="pgsql-dbdrop" depends="_init,setup-pgsql-driver" if="maven.profile.pgsql">
    <parallel threadCount="1" timeout="120000" failonany="true">
      <sequential>
        <sql driver="org.postgresql.Driver"
             url="jdbc:postgresql://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
             userid="${nuxeo.dbsetup.adminuser}"
             password="${nuxeo.dbsetup.adminpass}"
             autocommit="true">
          <classpath>
            <pathelement path="${classpath}" />
            <fileset dir="${jdbc.dir}">
              <include name="**/*.jar" />
            </fileset>
          </classpath>
          DROP DATABASE IF EXISTS ${nuxeo.db.name};
          DROP USER IF EXISTS ${nuxeo.db.user};
        </sql>
      </sequential>
    </parallel>
  </target>

  <target name="pgsql-dbcreate" depends="_init,setup-pgsql-driver,pgsql-dbdrop" if="maven.profile.pgsql">
    <sql driver="org.postgresql.Driver"
         url="jdbc:postgresql://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
         userid="${nuxeo.dbsetup.adminuser}"
         password="${nuxeo.dbsetup.adminpass}"
         autocommit="true">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${jdbc.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      CREATE USER ${nuxeo.db.user} WITH PASSWORD '${nuxeo.db.pass}';
      GRANT ${nuxeo.db.user} TO ${nuxeo.dbsetup.adminuser};
      CREATE DATABASE ${nuxeo.db.name} OWNER ${nuxeo.db.user} ENCODING='UTF-8';
    </sql>
  </target>

  <target name="mssql-dbdrop" depends="_init,setup-mssql-driver" if="maven.profile.mssql">
    <parallel threadCount="1" timeout="120000" failonany="true">
      <sequential>
        <sql driver="com.microsoft.sqlserver.jdbc.SQLServerDriver"
             url="jdbc:sqlserver://${nuxeo.db.host}:${nuxeo.db.port};database=${nuxeo.dbsetup.adminname}"
             userid="${nuxeo.dbsetup.adminuser}"
             password="${nuxeo.dbsetup.adminpass}"
             autocommit="true">
          <classpath>
            <pathelement path="${classpath}" />
            <fileset dir="${jdbc.dir}">
              <include name="**/*.jar" />
            </fileset>
          </classpath>
          IF EXISTS(SELECT * FROM sys.databases WHERE NAME='${nuxeo.db.name}')
             DROP DATABASE ${nuxeo.db.name};
          IF EXISTS(SELECT * FROM sys.server_principals WHERE NAME='${nuxeo.db.user}' AND TYPE_DESC IN ('SQL_LOGIN'))
             DROP LOGIN ${nuxeo.db.user};
        </sql>
      </sequential>
    </parallel>
  </target>

  <target name="mssql-dbcreate" depends="_init,setup-mssql-driver,mssql-dbdrop" if="maven.profile.mssql">
    <sql driver="com.microsoft.sqlserver.jdbc.SQLServerDriver"
         url="jdbc:sqlserver://${nuxeo.db.host}:${nuxeo.db.port};database=${nuxeo.dbsetup.adminname}"
         userid="${nuxeo.dbsetup.adminuser}"
         password="${nuxeo.dbsetup.adminpass}"
         autocommit="true">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${jdbc.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      CREATE LOGIN ${nuxeo.db.user} WITH PASSWORD='${nuxeo.db.pass}';
      CREATE DATABASE ${nuxeo.db.name};
      ALTER DATABASE ${nuxeo.db.name} COLLATE French_CS_AS;
      ALTER DATABASE ${nuxeo.db.name} SET ALLOW_SNAPSHOT_ISOLATION ON;
      ALTER DATABASE ${nuxeo.db.name} SET READ_COMMITTED_SNAPSHOT ON;
      USE ${nuxeo.db.name};
      CREATE USER ${nuxeo.db.user} FOR LOGIN ${nuxeo.db.user};
      EXECUTE sp_addrolemember 'db_owner', ${nuxeo.db.user};
    </sql>
  </target>

  <target name="oracle-dbdrop" depends="_init,setup-oracle-driver" if="maven.profile.oracle">
    <parallel threadCount="1" timeout="120000" failonany="true">
      <sequential>
        <sql driver="oracle.jdbc.OracleDriver"
             url="jdbc:oracle:thin:@//${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
             userid="${nuxeo.dbsetup.adminuser} as sysdba"
             password="${nuxeo.dbsetup.adminpass}"
             autocommit="true"
             delimiter="--next--">
          <classpath>
            <pathelement path="${classpath}" />
            <fileset dir="${jdbc.dir}">
              <include name="**/*.jar" />
            </fileset>
          </classpath>
          DECLARE
            num number:=0;
            drop_stmt VARCHAR2(200);
          BEGIN
            SELECT COUNT(*) INTO num FROM dba_users WHERE username = UPPER('${nuxeo.db.user}');
            IF num &lt;&gt; 0 THEN
              EXECUTE IMMEDIATE 'DROP USER ${nuxeo.db.user} CASCADE';
            END IF;
          EXCEPTION
            WHEN OTHERS THEN
              raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
          END;
        </sql>
      </sequential>
    </parallel>
  </target>

  <target name="oracle-dbcreate" depends="_init,setup-oracle-driver,oracle-dbdrop" if="maven.profile.oracle">
    <sql driver="oracle.jdbc.OracleDriver"
         url="jdbc:oracle:thin:@//${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
         userid="${nuxeo.dbsetup.adminuser} as sysdba"
         password="${nuxeo.dbsetup.adminpass}"
         autocommit="true">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${jdbc.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      CREATE USER ${nuxeo.db.user} IDENTIFIED BY ${nuxeo.db.pass} QUOTA UNLIMITED ON users;
      GRANT EXECUTE ON SYS.DBMS_CRYPTO TO ${nuxeo.db.user};
      GRANT SELECT ON SYS.V_$$SESSION TO ${nuxeo.db.user};
      GRANT SELECT ON SYS.GV_$$SESSION TO ${nuxeo.db.user};
      GRANT CONNECT TO ${nuxeo.db.user};
      GRANT RESOURCE TO ${nuxeo.db.user};
    </sql>
  </target>

  <target name="mysql-dbdrop" depends="_init,setup-mysql-driver" if="maven.profile-type.mysql">
    <parallel threadCount="1" timeout="120000" failonany="true">
      <sequential>
        <sql driver="com.mysql.jdbc.Driver"
             url="jdbc:mysql://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
             userid="${nuxeo.dbsetup.adminuser}"
             password="${nuxeo.dbsetup.adminpass}"
             autocommit="true"
             delimiter="//">
          <classpath>
            <pathelement path="${classpath}" />
            <fileset dir="${jdbc.dir}">
              <include name="**/*.jar" />
            </fileset>
          </classpath>
            DROP PROCEDURE IF EXISTS drop_nuxeo_user//
            CREATE PROCEDURE drop_nuxeo_user(IN nxuser VARCHAR(255))
            BEGIN
              DECLARE num INT;
              SELECT COUNT(*) INTO num FROM mysql.user WHERE user=nxuser AND host='%';
              IF num &lt;&gt; 0 THEN
                SET @D=CONCAT("DROP USER ", nxuser);
                PREPARE stmt FROM @D;
                EXECUTE stmt;
              END IF;
            END;//
            CALL drop_nuxeo_user('${nuxeo.db.user}')//
            DROP DATABASE IF EXISTS ${nuxeo.db.name}//
        </sql>
      </sequential>
    </parallel>
  </target>

  <target name="mysql-dbcreate" depends="_init,setup-mysql-driver,mysql-dbdrop" if="maven.profile-type.mysql">
    <sql driver="com.mysql.jdbc.Driver"
         url="jdbc:mysql://${nuxeo.db.host}:${nuxeo.db.port}/${nuxeo.dbsetup.adminname}"
         userid="${nuxeo.dbsetup.adminuser}"
         password="${nuxeo.dbsetup.adminpass}"
         autocommit="true">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${jdbc.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      CREATE DATABASE ${nuxeo.db.name} CHARACTER SET UTF8;;
      GRANT ALL ON ${nuxeo.db.name}.* TO '${nuxeo.db.user}'@'%' IDENTIFIED BY '${nuxeo.db.pass}';
      GRANT SELECT ON mysql.proc TO '${nuxeo.db.user}'@'%';
      FLUSH PRIVILEGES;
    </sql>
  </target>

  <target name="mongodb-dbdrop" depends="_init,setup-mongodb-driver" if="maven.profile.mongodb">
    <echo level="info">Dropping database named '${nuxeo.mongodb.dbname}' on '${nuxeo.mongodb.server}'</echo>
    <if>
      <or>
        <matches pattern="^127\..*" string="${nuxeo.mongodb.server}"/>
        <equals arg1="${nuxeo.mongodb.server}" arg2="172.17.0.1:27017" />
      </or>
      <then>
        <exec executable="mongo">
          <arg line="${nuxeo.mongodb.server}/${nuxeo.mongodb.dbname} --eval 'db.default.remove({})'" />
        </exec>
      </then>
    </if>
  </target>

  <target name="mongodb-dbcreate" depends="_init,setup-mongodb-driver,mongodb-dbdrop" if="maven.profile.mongodb">
    <!-- NO OP -->
  </target>

  <target name="setup-pgsql-driver" depends="_init">
    <copy todir="${jdbc.dir}">
      <artifact:resolveFile key="org.postgresql:postgresql" />
    </copy>
  </target>

  <target name="setup-mssql-driver" depends="_init">
    <copy todir="${jdbc.dir}">
      <artifact:resolveFile key="com.microsoft.sqlserver:sqljdbc" />
    </copy>
  </target>

  <target name="setup-oracle-driver" depends="_init">
    <nx:profile name="oracle10g">
      <copy todir="${jdbc.dir}">
        <artifact:resolveFile key="com.oracle:ojdbc14:${oracle10g.driver.version}:jar" />
      </copy>
    </nx:profile>
    <nx:profile name="oracle11g">
      <copy todir="${jdbc.dir}">
        <artifact:resolveFile key="com.oracle:ojdbc6:${oracle11g.driver.version}:jar" />
      </copy>
    </nx:profile>
    <nx:profile name="oracle12c">
      <copy todir="${jdbc.dir}">
        <artifact:resolveFile key="com.oracle:ojdbc7:${oracle12c.driver.version}:jar" />
      </copy>
    </nx:profile>
  </target>

  <target name="setup-mysql-driver" depends="_init">
    <copy todir="${jdbc.dir}">
      <artifact:resolveFile key="mysql:mysql-connector-java" />
    </copy>
  </target>

  <target name="setup-mongodb-driver" depends="_init">
    <!-- NO OP -->
    <!-- <copy todir="${jdbc.dir}"> -->
    <!-- <artifact:resolveFile key="org.mongodb:mongo-java-driver" /> -->
    <!-- </copy> -->
  </target>

  <target name="prepare-db" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <mkdir dir="${jdbc.dir}" />
    <nx:profile name="pgsql">
      <echo level="info">Prepare PostgreSQL...</echo>
      <antcall target="pgsql-dbcreate" />
    </nx:profile>
    <nx:profile name="mssql">
      <echo level="info">Prepare MSSQL...</echo>
      <antcall target="mssql-dbcreate" />
    </nx:profile>
    <nx:profile name="oracle10g">
      <echo level="info">Prepare Oracle 10g...</echo>
      <antcall target="oracle-dbcreate" />
    </nx:profile>
    <nx:profile name="oracle11g">
      <echo level="info">Prepare Oracle 11g...</echo>
      <antcall target="oracle-dbcreate" />
    </nx:profile>
    <nx:profile name="oracle12c">
      <echo level="info">Prepare Oracle 12c...</echo>
      <antcall target="oracle-dbcreate" />
    </nx:profile>
    <nx:profile name="mysql">
      <echo level="info">Prepare MySQL...</echo>
      <antcall target="mysql-dbcreate" />
    </nx:profile>
    <nx:profile name="mariadb">
      <echo level="info">Prepare MariaDB...</echo>
      <antcall target="mysql-dbcreate" />
    </nx:profile>
    <nx:profile name="mongodb">
      <echo level="info">Prepare MongoDB...</echo>
      <antcall target="mongodb-dbcreate" />
    </nx:profile>
  </target>

  <target name="cleanup-db" depends="_init" if="nuxeo.dbsetup.dodbconf">
    <mkdir dir="${jdbc.dir}" />
    <nx:profile name="pgsql">
      <antcall target="pgsql-dbdrop" />
    </nx:profile>
    <nx:profile name="mssql">
      <antcall target="mssql-dbdrop" />
    </nx:profile>
    <nx:profile name="oracle10g">
      <antcall target="oracle-dbdrop" />
    </nx:profile>
    <nx:profile name="oracle11g">
      <antcall target="oracle-dbdrop" />
    </nx:profile>
    <nx:profile name="oracle12c">
      <antcall target="oracle-dbdrop" />
    </nx:profile>
    <nx:profile name="mysql">
      <antcall target="mysql-dbdrop" />
    </nx:profile>
    <nx:profile name="mariadb">
      <antcall target="mysql-dbdrop" />
    </nx:profile>
    <nx:profile name="mongodb">
      <antcall target="mongodb-dbdrop" />
    </nx:profile>
  </target>

  <target name="setup-mail-server"
          if="nuxeo.mailserver.set"
          depends="_init"
          description="Set mail transport properties in ${nuxeo.conf} if set.">
    <if>
      <isset property="mail.transport.port" />
      <then>
        <antcall target="set-conf">
          <param name="name" value="mail.transport.port" />
          <param name="value" value="${mail.transport.port}" />
        </antcall>
      </then>
    </if>
    <if>
      <isset property="mail.transport.host" />
      <then>
        <antcall target="set-conf">
          <param name="name" value="mail.transport.host" />
          <param name="value" value="${mail.transport.host}" />
        </antcall>
      </then>
    </if>
    <if>
      <isset property="mail.transport.protocol" />
      <then>
        <antcall target="set-conf">
          <param name="name" value="mail.transport.protocol" />
          <param name="value" value="${mail.transport.protocol}" />
        </antcall>
      </then>
    </if>
    <if>
      <isset property="mail.transport.usetls" />
      <then>
        <antcall target="set-conf">
          <param name="name" value="mail.transport.usetls" />
          <param name="value" value="${mail.transport.usetls}" />
        </antcall>
      </then>
    </if>
    <if>
      <isset property="mail.transport.auth" />
      <then>
        <antcall target="set-conf">
          <param name="name" value="mail.transport.auth" />
          <param name="value" value="${mail.transport.auth}" />
        </antcall>
      </then>
    </if>
    <if>
      <isset property="mail.transport.user" />
      <then>
        <antcall target="set-conf">
          <param name="name" value="mail.transport.user" />
          <param name="value" value="${mail.transport.user}" />
        </antcall>
      </then>
    </if>
    <if>
      <isset property="mail.transport.password" />
      <then>
        <antcall target="set-conf">
          <param name="name" value="mail.transport.password" />
          <param name="value" value="${mail.transport.password}" />
        </antcall>
      </then>
    </if>
  </target>

  <target name="prepare-environment"
          depends="_init,prepare-db,prepare-tomcat,prepare-monitor"
          description="prepare all ressources for test">
  </target>

  <target name="cleanup-environment" depends="_init,cleanup-db" />

  <target name="download" unless="no.download">
    <echo level="info" message="Downloading ${server.gav}" />
    <delete failonerror="false" dir="${nuxeo.home}" />
    <unzip dest="${nuxeo.home}/">
      <artifact:file key="${server.gav}" />
      <cutdirsmapper dirs="1" />
    </unzip>
  </target>

  <target name="unzip-local" if="zip.file">
    <echo level="info" message="Using local archive ${zip.file}" />
    <delete failonerror="false" dir="${nuxeo.home}" />
    <unzip dest="${nuxeo.home}/" src="${zip.file}">
      <cutdirsmapper dirs="1" />
    </unzip>
  </target>

  <target name="prepare-selenium" description="prepare Selenium files for tests">
    <copy tofile="${out.dir}/selenium-server.jar">
      <artifact:resolveFile key="org.seleniumhq.selenium:selenium-server-standalone" />
    </copy>
    <echo level="info">Replace local folder in user-extensions.js</echo>
    <path id="data.dir.path">
      <pathelement location="data" />
    </path>
    <pathconvert refid="data.dir.path" property="data.dir.path.for.currentos" />
    <copy file="${out.dir}/user-extensions.js.sample" tofile="${out.dir}/user-extensions.js" overwrite="true" />
    <echo level="info">Set into user-extensions-browser.js project path ${data.dir.path.for.currentos}</echo>
    <antcall target="user-extensions" />
    <echo level="info">Replace url in prefs.js</echo>
    <copy file="${out.dir}/ffprofile/prefs.js.sample" tofile="${out.dir}/ffprofile/prefs.js" overwrite="true" />
    <replace file="${out.dir}/ffprofile/prefs.js" token="ApplicationServerURL" value="${nuxeoURL}" />
  </target>

  <target name="user-extensions">
    <replace file="${out.dir}/user-extensions.js"
             token="/path/to/project-ear/ftest/selenium/data/"
             value="${data.dir.path.for.currentos}${file.separator}" />
    <replace file="${out.dir}/user-extensions.js" token="out.dir" value="${out.dir}" />
    <antcall target="user-extensions-for-windows" />
  </target>
  <target name="user-extensions-for-windows" if="osfamily-windows">
    <replace file="${out.dir}/user-extensions.js" token="\" value="\\" />
  </target>

  <target name="start" depends="_init,stop,start-unix,start-windows" />
  <target name="start-unix" if="osfamily-unix">
    <if>
      <available file="${nuxeo.data}/installAfterRestart.log" />
      <then>
        <echo level="info" message="Execute pending actions before start" />
        <exec executable="${nuxeo.home}/bin/nuxeoctl" spawn="false" failonerror="true">
          <arg value="mp-install" />
          <arg value="${nuxeoctl.option.clid}" if:set="nuxeoctl.option.clid" unless:blank="${nuxeoctl.option.clid}" />
          <env key="LAUNCHER_DEBUG" value="${launcher.debug}" />
        </exec>
      </then>
    </if>
    <chmod dir="${nuxeo.home}/bin" perm="ug+x" includes="*.sh,*ctl" />
    <exec executable="${nuxeo.home}/bin/nuxeoctl" spawn="false" failonerror="false" resultproperty="retcode">
      <arg value="start" />
      <arg value="--force" />
      <arg value="${nuxeoctl.option.clid}" if:set="nuxeoctl.option.clid" unless:blank="${nuxeoctl.option.clid}" />
      <env key="LAUNCHER_DEBUG" value="${launcher.debug}" />
    </exec>
    <condition property="startup.failed" value="${retcode}">
      <not>
        <equals arg1="${retcode}" arg2="0" />
      </not>
    </condition>
    <antcall target="stop-iffailed" />
  </target>
  <target name="stop-iffailed" if="startup.failed">
    <antcall target="stop" />
    <fail status="${startup.failed}" message="Startup failed!" />
  </target>
  <target name="restart-unix" if="osfamily-unix">
    <chmod dir="${nuxeo.home}/bin" perm="ug+x" includes="*.sh,*ctl" />
    <exec executable="${nuxeo.home}/bin/nuxeoctl" spawn="false" failonerror="true">
      <arg value="restart" />
      <env key="LAUNCHER_DEBUG" value="${launcher.debug}" />
    </exec>
  </target>
  <target name="start-windows" if="osfamily-windows">
    <if>
      <available file="${nuxeo.data}/installAfterRestart.log" />
      <then>
        <echo level="info" message="Execute pending actions before start" />
        <exec executable="${nuxeo.home}/bin/nuxeoctl.bat" spawn="false" failonerror="true">
          <arg value="--gui=false" />
          <arg value="${nuxeoctl.option.clid}" if:set="nuxeoctl.option.clid" unless:blank="${nuxeoctl.option.clid}" />
          <arg value="mp-install" />
          <env key="LAUNCHER_DEBUG" value="${launcher.debug}" />
        </exec>
      </then>
    </if>
    <exec executable="${nuxeo.home}/bin/nuxeoctl.bat" spawn="false" failonerror="false" resultproperty="retcode">
      <arg value="--gui=false" />
      <arg value="start" />
      <arg value="--force" />
      <arg value="${nuxeoctl.option.clid}" if:set="nuxeoctl.option.clid" unless:blank="${nuxeoctl.option.clid}" />
      <env key="LAUNCHER_DEBUG" value="${launcher.debug}" />
    </exec>
    <condition property="startup.failed" value="${retcode}">
      <not>
        <equals arg1="${retcode}" arg2="0" />
      </not>
    </condition>
    <antcall target="stop-iffailed" />
  </target>

  <target name="stop" depends="_init,stop-unix,stop-windows">
    <if>
      <equals arg1="${env.KILL_TOMCAT}" arg2="true" />
      <then>
        <antcall target="kill-tomcat" />
      </then>
    </if>
  </target>

  <target name="stop-unix" if="osfamily-unix">
    <chmod dir="${nuxeo.home}/bin" perm="ug+x" includes="*.sh,*ctl" />
    <exec executable="${nuxeo.home}/bin/nuxeoctl" spawn="false" failifexecutionfails="false">
      <arg value="stop" />
    </exec>
  </target>
  <target name="stop-windows" if="osfamily-windows">
    <exec executable="${nuxeo.home}/bin/nuxeoctl.bat" spawn="false" failifexecutionfails="false">
      <arg value="--gui=false" />
      <arg value="stop" />
    </exec>
  </target>

  <target name="wizard-on" depends="_init" description="DEPRECATED: call set-conf instead.">
    <echo append="true" file="${nuxeo.conf}">nuxeo.wizard.done=false${line.separator}</echo>
  </target>
  <target name="wizard-off" depends="_init" description="DEPRECATED: call set-conf instead.">
    <echo append="true" file="${nuxeo.conf}">nuxeo.wizard.done=true${line.separator}</echo>
  </target>

  <target name="check-set-wizard" if="nuxeo.wizard.done" depends="_init">
    <echo level="info" message="Setting nuxeo.wizard.done=${nuxeo.wizard.done}" />
    <antcall target="set-conf">
      <param name="name" value="nuxeo.wizard.done" />
      <param name="value" value="${nuxeo.wizard.done}" />
    </antcall>
  </target>

  <target name="set-java-home"
          if="env.NX_JAVA_HOME"
          depends="_init"
          description="Set JAVA_HOME in ${nuxeo.conf} with env.NX_JAVA_HOME value, if defined.">
    <antcall target="set-conf">
      <param name="name" value="JAVA_HOME" />
      <param name="value" value="${env.NX_JAVA_HOME}" />
    </antcall>
    <echo level="info" message="Using JAVA_HOME=${env.NX_JAVA_HOME}" />
  </target>

  <target name="fix-max-waits" depends="_init" description="Increase default time to wait for server to stop">
    <antcall target="set-conf">
      <param name="name" value="launcher.start.max.wait" />
      <param name="value" value="300" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="launcher.stop.max.wait" />
      <param name="value" value="300" />
    </antcall>
  </target>

  <target name="set-nuxeoconf-db" depends="_init" if="maven.dbprofile">
    <nx:profile name="pgsql">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="postgresql" />
      </antcall>
    </nx:profile>
    <nx:profile name="mssql">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="mssql" />
      </antcall>
    </nx:profile>
    <nx:profile name="oracle10g">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="oracle" />
      </antcall>
    </nx:profile>
    <nx:profile name="oracle11g">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="oracle" />
      </antcall>
    </nx:profile>
    <nx:profile name="oracle12c">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="oracle" />
      </antcall>
    </nx:profile>
    <nx:profile name="mysql">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="mysql" />
      </antcall>
    </nx:profile>
    <nx:profile name="mariadb">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="mysql" />
      </antcall>
    </nx:profile>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.host" />
      <param name="value" value="${nuxeo.db.host}" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.port" />
      <param name="value" value="${nuxeo.db.port}" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.name" />
      <param name="value" value="${nuxeo.db.name}" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.user" />
      <param name="value" value="${nuxeo.db.user}" />
    </antcall>
    <antcall target="set-conf">
      <param name="name" value="nuxeo.db.password" />
      <param name="value" value="${nuxeo.db.pass}" />
    </antcall>
  </target>

  <target name="nuxeo-conf"
          depends="_init,set-java-home,check-set-wizard,set-nuxeoconf-db,setup-mail-server"
          description="Configure ${nuxeo.conf} depending on environment values.">
    <!-- activate logs for Selenium tests -->
    <antcall target="set-conf">
      <param name="name" value="org.nuxeo.systemlog.token" />
      <param name="value" value="dolog" />
    </antcall>
    <!-- activate tester name -->
    <antcall target="set-conf">
      <param name="name" value="org.nuxeo.ecm.tester.name" />
      <param name="value" value="Nuxeo-Selenium-Tester" />
    </antcall>
    <nx:profile name="mongodb">
      <antcall target="set-conf">
        <param name="name" value="nuxeo.templates" />
        <param name="value" value="default,mongodb" />
      </antcall>
      <if>
        <isset property="nuxeo.mongodb.server" />
        <then>
          <antcall target="set-conf">
            <param name="name" value="nuxeo.mongodb.server" />
            <param name="value" value="${nuxeo.mongodb.server}" />
          </antcall>
        </then>
      </if>
      <antcall target="set-conf">
        <param name="name" value="nuxeo.mongodb.dbname" />
        <param name="value" value="${nuxeo.mongodb.dbname}" />
      </antcall>
    </nx:profile>
  </target>

  <target name="set-conf" depends="_init" description="Add property to ${nuxeo.conf} with ${name}=${value}">
    <echo append="true" file="${nuxeo.conf}">${name}=${value}${line.separator}</echo>
  </target>

  <target name="activate-wizard-preset"
          depends="_init"
          if="wizard.preset"
          description="Activate the configured wizard preset.">
    <if>
      <equals arg1="${wizard.preset}" arg2="nuxeo-dam" />
      <then>
        <echo append="true" file="${nuxeo.data}/installAfterRestart.log" message="nuxeo-dam">
        </echo>
      </then>
      <elseif>
        <equals arg1="${wizard.preset}" arg2="nuxeo-sc" />
        <then>
          <echo append="true" file="${nuxeo.data}/installAfterRestart.log" message="nuxeo-sc">
          </echo>
        </then>
      </elseif>
    </if>
    <echo file="${nuxeo.home}/setupWizardDownloads/packages-default-selection.properties"
          message="preset=${wizard.preset}" />
  </target>

  <target name="mp-install" depends="_init" if="mp.install" description="Install comma-separated Marketplace packages">
    <for list="${mp.install}" param="package" delimiter="," trim="true">
      <sequential>
        <echo append="true" file="${nuxeo.data}/installAfterRestart.log" message="@{package}">
        </echo>
      </sequential>
    </for>
  </target>

  <target name="kill-tomcat" depends="_init">
    <exec executable="${env.JAVA_HOME}/bin/jps">
      <arg value="-l" />
      <redirector outputproperty="tomcat.pid">
        <outputfilterchain>
          <prefixlines prefix=" " />
          <linecontains>
            <contains value="org.apache.catalina.startup.Bootstrap" />
          </linecontains>
          <replacestring from=" org.apache.catalina.startup.Bootstrap" />
          <striplinebreaks />
          <trim />
        </outputfilterchain>
      </redirector>
    </exec>
    <for list="${tomcat.pid}" delimiter=" " param="pid">
      <sequential>
        <echo message="Terminating pid @{pid}" />
        <exec executable="kill" osfamily="unix">
          <arg value="-9" />
          <arg value="@{pid}" />
        </exec>
        <exec executable="taskkill" osfamily="windows">
          <arg value="/f" />
          <arg value="/t" />
          <arg value="/pid" />
          <arg value="@{pid}" />
        </exec>
      </sequential>
    </for>
  </target>

</project>
