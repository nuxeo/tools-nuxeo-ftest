// Absolute path to current folder this path is set at runtime by run.sh
Selenium.prototype.doRetrieveTestFolderPath = function() {
  storedVars['testfolderpath'] = "/path/to/project-ear/ftest/selenium/data/";
};

// helper method to store current year/month/day
Selenium.prototype.doRetrieveCurrentDateInfo = function() {
  var date = new Date();
  storedVars['currentYear'] = date.getFullYear();
  var m = date.getMonth() + 1;
  storedVars['currentMonth'] = (m < 10) ? '0' + m : m;
  var d = date.getDate();
  storedVars['currentDay'] = (d < 10) ? '0' + d : d;
};

// override default method to make sure privilege to type file path is enabled
Selenium.prototype.doType = function(locator, value) {
   /**
   * Sets the value of an input field, as though you typed it in.
   *
   * <p>Can also be used to set the value of combo boxes, check boxes, etc. In these cases,
   * value should be the value of the option selected, not the visible text.</p>
   *
   * @param locator an <a href="#locators">element locator</a>
   * @param value the value to type
   */
   // this is the added line here:
   netscape.security.PrivilegeManager.enablePrivilege("UniversalFileRead");
   if (this.browserbot.controlKeyDown || this.browserbot.altKeyDown || this.browserbot.metaKeyDown) {
        throw new SeleniumError("type not supported immediately after call to controlKeyDown() or altKeyDown() or metaKeyDown()");
   }
   // TODO fail if it can't be typed into.
   var element = this.browserbot.findElement(locator);
   if (this.browserbot.shiftKeyDown) {
       value = new String(value).toUpperCase();
   }
   this.browserbot.replaceText(element, value);
};


// ajax4jsf testing helper inspired from
// http://codelevy.com/articles/2007/11/05/selenium-and-ajax-requests
/**
 * Registers with the a4j library to record when an Ajax request
 * finishes.
 *
 * Call this after the most recent page load but before any Ajax requests.
 *
 * Once you've called this for a page, you should call waitForA4jRequest at
 * every opportunity, to make sure the A4jRequestFinished flag is consumed.
 */
Selenium.prototype.doWatchA4jRequests = function() {
  var testWindow = selenium.browserbot.getCurrentWindow();
  // workaround for Selenium IDE 1b2 bug, see
  // http://clearspace.openqa.org/message/46135
  if (testWindow.wrappedJSObject) {
      testWindow = testWindow.wrappedJSObject;
  }
  Selenium.A4jRequestFinished = false;
  Selenium.ActiveA4jRequestCount = 0;
  testWindow.A4J.AJAX.AddListener({
    onbeforeajax: function() {
      Selenium.ActiveA4jRequestCount++;
    }
  });
  testWindow.A4J.AJAX.AddListener({
    onafterajax: function() {
      Selenium.ActiveA4jRequestCount--;
      if (Selenium.ActiveA4jRequestCount == 0) {
        Selenium.A4jRequestFinished = true;
      }
    }
  });
}

/**
 * If you've set up with watchA4jRequests, this routine will wait until
 * an Ajax request has finished and then return.
 */
Selenium.prototype.doWaitForA4jRequest = function(timeout) {
  return Selenium.decorateFunctionWithTimeout(function() {
    if (Selenium.A4jRequestFinished) {
      Selenium.A4jRequestFinished = false;
      return true;
    }
    return false;
  }, timeout);
}

Selenium.A4jRequestFinished = false;
Selenium.ActiveA4jRequestCount = 0;


// wait for jquery and/or prototype calls
Selenium.prototype.doWaitForJSQueries = function(timeout) {
  return Selenium.decorateFunctionWithTimeout(function() {
  	var testWindow = selenium.browserbot.getCurrentWindow();
    if (testWindow.wrappedJSObject) {
        testWindow = testWindow.wrappedJSObject;
    }
    if (testWindow.jQuery.active == 0 && testWindow.Ajax.activeRequestCount == 0) {
      return true;
    }
    return false;
  }, timeout);
}

/**
 * Function that waits for opensocial gadgets to be loaded.
 * Assumes frame name starts with "gadget" and will display a div with id
 * "nxDocumentList".
 * Accepts a mandatory element id with content to check, and timeout.
 */
Selenium.prototype.doWaitForOpensocialGadgetsToLoad = function(mandatoryElementId, timeout) {
  var framesLoadedPredicate = function () {
    var testWindow = selenium.browserbot.getCurrentWindow();
    if (testWindow.wrappedJSObject) {
      testWindow = testWindow.wrappedJSObject;
    }
    var foundOneGadgetFrame = false;
    if (testWindow.frames && testWindow.frames.length && testWindow.frames.length > 0) {
      for (var i = 0; i < testWindow.frames.length; i++) {
        LOG.debug("Selected frame: " + testWindow.frames[i].name);
        if (testWindow.frames[i].name && testWindow.frames[i].name.match("^gadget")=="gadget") {
          foundOneGadgetFrame = true;
          selenium.browserbot.selectFrame("index="+i);
          var testFrame = selenium.browserbot.getCurrentWindow();
          if (testFrame.wrappedJSObject) {
            testFrame = testFrame.wrappedJSObject;
          }
          // wait for frame to be loaded
          var loaded = false;
          if (testFrame.document.getElementById(mandatoryElementId)) {
            var content = this.getText(testFrame.document.getElementById(mandatoryElementId));
            if (content) {
              loaded = true;
            }
          }
          if (!loaded) {
            // go back to original window
            selenium.browserbot.selectWindow();
            return false;
          }
          LOG.info("Loaded frame: " + testWindow.frames[i].name);
          // go back to original window to iterate over frames
          selenium.browserbot.selectWindow();
        }
      }
      if (!foundOneGadgetFrame) {
        LOG.debug("no gadget frames present yet");
        return false;
      }
    } else {
      LOG.debug("no frames present yet");
      return false;
    }
    return true;
  };

  return Selenium.decorateFunctionWithTimeout(framesLoadedPredicate, timeout);
}
