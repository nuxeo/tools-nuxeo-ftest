// Absolute path to current folder this path is set at runtime by run.sh
Selenium.prototype.doRetrieveTestFolderPath = function() {
    storedVars['testfolderpath'] = "/path/to/project-ear/ftest/selenium/data/";
};

// helper method to store current year/month/day
Selenium.prototype.doRetrieveCurrentDateInfo = function() {
    var date = new Date();
    storedVars['currentYear'] = date.getFullYear();
    var m = date.getMonth() + 1;
    storedVars['currentMonth'] = (m < 10) ? '0' + m : m;
    var d = date.getDate();
    storedVars['currentDay'] = (d < 10) ? '0' + d : d;
};


// override default method to make sure privilege to type file path is enabled
Selenium.prototype.doOriginalType = Selenium.prototype.doType;

Selenium.prototype.doType = function(locator, value) {

    // Don't block file uploads on Firefox < 15
    if (typeof netscape != "undefined" && typeof netscape.security.PrivilegeManager != "undefined") {
        netscape.security.PrivilegeManager.enablePrivilege("UniversalFileRead");
    }

    // convert string to uppercase if shift is pressed
    if (this.browserbot.shiftKeyDown) {
        value = new String(value).toUpperCase();
    }
    // wait for element to be present before trying to type into it
    var timeoutTime = getTimeoutTime(this.defaultTimeout);
    while (this.browserbot.findElementOrNull(locator)==null) {
        if (new Date().getTime() > timeoutTime) {
            throw new SeleniumError("Timed out after " + this.defaultTimeout + "ms");
        }
    }

    this.doOriginalType(locator, value);

};


// override default click method to make sure element is present before clicking
Selenium.prototype.doOriginalClick = Selenium.prototype.doClick;

Selenium.prototype.doClick = function(locator) {

    // wait for element to be present before trying to click it
    var timeoutTime = getTimeoutTime(this.defaultTimeout);
    while (this.browserbot.findElementOrNull(locator)==null) {
        if (new Date().getTime() > timeoutTime) {
            throw new SeleniumError("Timed out after " + this.defaultTimeout + "ms");
        }
    }

    this.doOriginalClick(locator);

};


// override default clickAndWait method to make sure element is present before clicking
Selenium.prototype.doClickAndWait = function(locator) {

    this.doClick(locator);
    return this.doWaitForPageToLoad(this.defaultTimeout);

};


// override buggy doTypeKeys method
Selenium.prototype.doTypeKeys = function(locator, value) {

    // wait for element to be present before trying to type into it
    var timeoutTime = getTimeoutTime(this.defaultTimeout);
    while (this.browserbot.findElementOrNull(locator)==null) {
        if (new Date().getTime() > timeoutTime) {
            throw new SeleniumError("Timed out after " + this.defaultTimeout + "ms");
        }
    }

    // send key events (in the correct order unlike the api)
    var keys = new String(value).split("");
    for (var i = 0; i < keys.length; i++) {
        var c = keys[i];
        this.doKeyDown(locator, c);
        this.doKeyPress(locator, c);
       this.doKeyUp(locator, c);
    }

    // also set the correct text in the element
    try {
        this.doOriginalType(locator, value);
    } catch(err) {
        // this wasn't a text element
    }

};


/**
 * Registers with the a4j library to record when an Ajax request
 * finishes.
 *
 * Call this after the most recent page load but before any Ajax requests.
 *
 * Once you've called this for a page, you should call waitForA4jRequest at
 * every opportunity, to make sure the A4jRequestFinished flag is consumed.
 */
Selenium.prototype.doWatchA4jRequests = function() {
  var testWindow = selenium.browserbot.getCurrentWindow();
  // workaround for text window detection, see NXP-12556
  if (testWindow.wrappedJSObject) {
    testWindow = testWindow.wrappedJSObject;
  }
  testWindow.A4J.AJAX.startTest();
}

/**
 * If you've set up with watchA4jRequests, this routine will wait until
 * an Ajax request has finished and then return.
 */
Selenium.prototype.doWaitForA4jRequest = function(timeout) {
  return Selenium.decorateFunctionWithTimeout(function() {
    var testWindow = selenium.browserbot.getCurrentWindow();
    // workaround for text window detection, see NXP-12556
    if (testWindow.wrappedJSObject) {
      testWindow = testWindow.wrappedJSObject;
    }
    if (testWindow.A4J.AJAX.isTestFinished() == true) {
        return true;
    }
    return false;
  }, timeout);
}


// wait for jquery and/or prototype calls
Selenium.prototype.doWaitForJSQueries = function(timeout) {
  return Selenium.decorateFunctionWithTimeout(function() {
    var testWindow = selenium.browserbot.getCurrentWindow();
    // workaround for text window detection, see NXP-12556
    if (testWindow.wrappedJSObject) {
      testWindow = testWindow.wrappedJSObject;
    }
    if (testWindow.jQuery.active == 0 && testWindow.Ajax.activeRequestCount == 0) {
      return true;
    }
    return false;
  }, timeout);
}

/**
 * Function that waits for opensocial gadgets to be loaded.
 * Assumes frame name starts with "open-social" and will display a div with id
 * "content".
 * Accepts one or more mandatory element id(s), separated by ',',
 * with content to check, and timeout.
 */
Selenium.prototype.doWaitForOpensocialGadgetsToLoad = function(mandatoryElementIds, timeout) {
  var framesLoadedPredicate = function () {
    var testWindow = selenium.browserbot.getCurrentWindow();
    // workaround for text window detection, see NXP-12556
    if (testWindow.wrappedJSObject) {
      testWindow = testWindow.wrappedJSObject;
    }

    if (testWindow.document.getElementById("gwtContainerDiv") === null) {
      // there is no OpenSocial container
      return true;
    }

    var foundOneGadgetFrame = false;
    if (testWindow.frames && testWindow.frames.length && testWindow.frames.length > 0) {
      for (var i = 0; i < testWindow.frames.length; i++) {
        LOG.debug("Selected frame: " + testWindow.frames[i].name);
        if (testWindow.frames[i].name && testWindow.frames[i].name.match("^open-social")=="open-social") {
          foundOneGadgetFrame = true;
          selenium.browserbot.selectFrame("index="+i);
          var testFrame = selenium.browserbot.getCurrentWindow();
          // wait for frame to be loaded
          var loaded = false;
          var mandatoryElementIdList = mandatoryElementIds.split(",");
          for(var j=0; j < mandatoryElementIdList.length ; j++){
            if (testFrame.document.getElementById(mandatoryElementIdList[j])) {
              var content = this.getText(testFrame.document.getElementById(mandatoryElementIdList[j]));
              if (content) {
                loaded = true;
                break;
              }
            }
          }
          if (!loaded) {
            // go back to original window
            selenium.browserbot.selectWindow();
            return false;
          }
          LOG.debug("Loaded frame: " + testWindow.frames[i].name);
          // go back to original window to iterate over frames
          selenium.browserbot.selectWindow();
        }
      }
      if (!foundOneGadgetFrame) {
        LOG.debug("no gadget frames present yet");
        return false;
      }
    } else {
      LOG.debug("no frames present yet");
      return false;
    }
    return true;
  };

  return Selenium.decorateFunctionWithTimeout(framesLoadedPredicate, timeout);
}

/**
 * Function that selects the frame for a given gadget name.
 * Assumes frame css classes contains a class which is the gadget name.
 *
 * Do not fail if there is no frame for the given gadget name in the page.
 */
Selenium.prototype.doSelectOpenSocialGadgetFrame = function(gadgetName) {
  var testWindow = selenium.browserbot.getCurrentWindow();
  // workaround for text window detection, see NXP-12556
  if (testWindow.wrappedJSObject) {
    testWindow = testWindow.wrappedJSObject;
  }
  if (testWindow.frames && testWindow.frames.length && testWindow.frames.length > 0) {
   for (var i = 0; i < testWindow.frames.length; i++) {
     var frame = testWindow.document.getElementById(testWindow.frames[i].name);
     if (typeof frame !== 'undefined' && frame !== null) {
       var styleClass = frame.getAttribute("class");
       if (styleClass !== null && styleClass.indexOf(gadgetName) != -1) {
         return selenium.browserbot.selectFrame(testWindow.frames[i].name);
       }
     }
   }
  }
  return;
}
